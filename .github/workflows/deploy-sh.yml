name: Deploy SH-Backend
run-name: Deploy version ${{ inputs.backend_image }} to ${{ inputs.environment }} environment from ${{ github.ref_name }} branch
                                               
permissions:
  id-token: write
  contents: read
  
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select the environment to deploy?
        required: true
        options:
          - dev
          - staging
          - prod
      backend_image:
        description: Hub backend image version
        required: true    
      activemq_image:
        description: ActiveMQ image version
        required: false
      ActiveMQ:
        type: boolean
        description: Want to update ActiveMQ with newer image?  

jobs:

  Stage-Setup:
    name: Stage Setup
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      stage: ${{ github.event.inputs.environment }}
      backend_image: ${{ github.event.inputs.backend_image }}
      activemq_image: ${{ github.event.inputs.activemq_image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Get Stage variable
        shell: bash
        run: |
          stage="${{ env.stage }}"
          if [[ "$stage" == "" ]]; then
            stage="dev"
          fi
          echo "stage=$stage" >> $GITHUB_OUTPUT
          echo Deployment will be in $stage Environment.
        id: get-stage
    outputs:
      stage: ${{ steps.get-stage.outputs.stage }}
      
  deploy-on-backend:
    name: SH Backend
    runs-on: ubuntu-latest
    environment: ${{ needs.Stage-Setup.outputs.stage }}
    env:
      backend_image: ${{ github.event.inputs.backend_image }}
      activemq_image: ${{ github.event.inputs.activemq_image }}
    needs: [Stage-Setup]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.SCRIBE2_GITHUB_ROLE }}
        role-session-name: Github
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Download task definition
      env:
        TASK_DEFINITION_NAME: ${{ secrets.BACKEND_TASK_DEFINITION_NAME }}
      run: |
        aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME  --query taskDefinition > task-definition.json

    - name: Create new revision for Task definition for Scribe Hub Backend
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.BACKEND_CONTAINER_NAME }}
        image: ${{ secrets.BACKEND_ECR_REPOSITORY }}:${{ env.backend_image }}

    - name: Update Backend Service with new Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ secrets.BACKEND_ECS_SERVICE }}
        cluster: ${{ secrets.ECS_AIRFLOW_CLUSTER }}
        wait-for-service-stability: true

  deploy-on-activemq:
    if: ${{ github.event.inputs.ActiveMQ == 'true' }}
    name: ActiveMQ
    runs-on: ubuntu-latest
    environment: ${{ needs.Stage-Setup.outputs.stage }}
    env:
      backend_image: ${{ inputs.backend_image }}
      activemq_image: ${{ inputs.activemq_image }}
    needs: [Stage-Setup]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.SCRIBE2_GITHUB_ROLE }}
        role-session-name: Github
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Download task definition
      env:
        TASK_DEFINITION_NAME: ${{ secrets.ACTIVEMQ_TASK_DEFINITION_NAME }}
      run: |
        aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME  --query taskDefinition > task-definition.json

    - name: Create new revision for Task definition for Scribe Hub ActiveMQ
      id: task-def-activemq
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.ACTIVEMQ_CONTAINER_NAME }}
        image: ${{ secrets.ACTIVEMQ_ECR_REPOSITORY }}:${{ env.activemq_image }}

    - name: Update ActiveMQ Service with new Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-activemq.outputs.task-definition }}
        service: ${{ secrets.ACTIVEMQ_ECS_SERVICE }}
        cluster: ${{ secrets.ECS_AIRFLOW_CLUSTER }}
        wait-for-service-stability: true
