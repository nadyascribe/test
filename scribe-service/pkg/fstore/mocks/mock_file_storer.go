// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scribe-security/scribe2/scribe-service/pkg/fstore (interfaces: FileStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileStorer is a mock of FileStorer interface.
type MockFileStorer struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorerMockRecorder
}

// MockFileStorerMockRecorder is the mock recorder for MockFileStorer.
type MockFileStorerMockRecorder struct {
	mock *MockFileStorer
}

// NewMockFileStorer creates a new mock instance.
func NewMockFileStorer(ctrl *gomock.Controller) *MockFileStorer {
	mock := &MockFileStorer{ctrl: ctrl}
	mock.recorder = &MockFileStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorer) EXPECT() *MockFileStorerMockRecorder {
	return m.recorder
}

// GetBucketName mocks base method.
func (m *MockFileStorer) GetBucketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBucketName indicates an expected call of GetBucketName.
func (mr *MockFileStorerMockRecorder) GetBucketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketName", reflect.TypeOf((*MockFileStorer)(nil).GetBucketName))
}

// GetDownloadURL mocks base method.
func (m *MockFileStorer) GetDownloadURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadURL indicates an expected call of GetDownloadURL.
func (mr *MockFileStorerMockRecorder) GetDownloadURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadURL", reflect.TypeOf((*MockFileStorer)(nil).GetDownloadURL), arg0, arg1)
}

// GetFileSize mocks base method.
func (m *MockFileStorer) GetFileSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize.
func (mr *MockFileStorerMockRecorder) GetFileSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockFileStorer)(nil).GetFileSize), arg0, arg1)
}

// GetStorageType mocks base method.
func (m *MockFileStorer) GetStorageType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStorageType indicates an expected call of GetStorageType.
func (mr *MockFileStorerMockRecorder) GetStorageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageType", reflect.TypeOf((*MockFileStorer)(nil).GetStorageType))
}

// GetUploadURL mocks base method.
func (m *MockFileStorer) GetUploadURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadURL indicates an expected call of GetUploadURL.
func (mr *MockFileStorerMockRecorder) GetUploadURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadURL", reflect.TypeOf((*MockFileStorer)(nil).GetUploadURL), arg0, arg1)
}
