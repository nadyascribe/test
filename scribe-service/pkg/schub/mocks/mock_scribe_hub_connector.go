// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scribe-security/scribe2/scribe-service/pkg/schub (interfaces: ScribeHubConnector)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	schub "github.com/scribe-security/scribe2/scribe-service/pkg/schub"
)

// MockScribeHubConnector is a mock of ScribeHubConnector interface.
type MockScribeHubConnector struct {
	ctrl     *gomock.Controller
	recorder *MockScribeHubConnectorMockRecorder
}

// MockScribeHubConnectorMockRecorder is the mock recorder for MockScribeHubConnector.
type MockScribeHubConnectorMockRecorder struct {
	mock *MockScribeHubConnector
}

// NewMockScribeHubConnector creates a new mock instance.
func NewMockScribeHubConnector(ctrl *gomock.Controller) *MockScribeHubConnector {
	mock := &MockScribeHubConnector{ctrl: ctrl}
	mock.recorder = &MockScribeHubConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScribeHubConnector) EXPECT() *MockScribeHubConnectorMockRecorder {
	return m.recorder
}

// NotifyCVEsDataChanged mocks base method.
func (m *MockScribeHubConnector) NotifyCVEsDataChanged(arg0 context.Context, arg1 *schub.CVEIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCVEsDataChanged", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyCVEsDataChanged indicates an expected call of NotifyCVEsDataChanged.
func (mr *MockScribeHubConnectorMockRecorder) NotifyCVEsDataChanged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCVEsDataChanged", reflect.TypeOf((*MockScribeHubConnector)(nil).NotifyCVEsDataChanged), arg0, arg1)
}

// SendBuildInfo mocks base method.
func (m *MockScribeHubConnector) SendBuildInfo(arg0 context.Context, arg1 *schub.BuildInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBuildInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBuildInfo indicates an expected call of SendBuildInfo.
func (mr *MockScribeHubConnectorMockRecorder) SendBuildInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBuildInfo", reflect.TypeOf((*MockScribeHubConnector)(nil).SendBuildInfo), arg0, arg1)
}

// SendCVEInfo mocks base method.
func (m *MockScribeHubConnector) SendCVEInfo(arg0 context.Context, arg1 *schub.CVEInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEInfo indicates an expected call of SendCVEInfo.
func (mr *MockScribeHubConnectorMockRecorder) SendCVEInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEInfo", reflect.TypeOf((*MockScribeHubConnector)(nil).SendCVEInfo), arg0, arg1)
}

// SendSarifInfo mocks base method.
func (m *MockScribeHubConnector) SendSarifInfo(arg0 context.Context, arg1 *schub.SarifInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSarifInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSarifInfo indicates an expected call of SendSarifInfo.
func (mr *MockScribeHubConnectorMockRecorder) SendSarifInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSarifInfo", reflect.TypeOf((*MockScribeHubConnector)(nil).SendSarifInfo), arg0, arg1)
}
