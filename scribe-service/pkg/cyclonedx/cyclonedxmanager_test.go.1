package cyclonedx

import (
	"bytes"
	"testing"

	cdx "github.com/CycloneDX/cyclonedx-go"
	"github.com/stretchr/testify/assert"
)

func TestCycloneDxManager_ExtractConcise(t *testing.T) {
	tests := []struct {
		name         string
		originalSbom cdx.BOM
		want         cdx.BOM
		wantErr      bool
	}{
		{
			name: "empty_components_and_deps",
			originalSbom: cdx.BOM{
				BOMFormat:    "format",
				SpecVersion:  1,
				Version:      99,
				Components:   nil,
				Dependencies: nil,
			},
			want: cdx.BOM{
				BOMFormat:    "format",
				SpecVersion:  1,
				Version:      99,
				Components:   nil,
				Dependencies: nil,
			},
		},
		{
			name: "check_components",
			originalSbom: cdx.BOM{
				BOMFormat:   "format",
				SpecVersion:  1,
				Version:     99,
				Components: compPtr([]cdx.Component{
					{
						BOMRef: "not-to-include-1",
						Type:   "file",
					},
					{
						BOMRef: "include-1",
						Type:   "not-file",
					},
					{
						BOMRef: "not-to-include-2",
						Type:   "file",
					},
					{
						BOMRef: "include-2",
						Type:   "file-but-not",
					},
				}),
				Dependencies: nil,
			},
			want: cdx.BOM{
				BOMFormat:   "format",
				SpecVersion:  1,
				Version:     99,
				Components: compPtr([]cdx.Component{
					{
						BOMRef: "include-2",
						Type:   "file-but-not",
					},
					{
						BOMRef: "include-1",
						Type:   "not-file",
					},
				}),
				Dependencies: nil,
			},
		},
		{
			name: "check_deps",
			originalSbom: cdx.BOM{
				BOMFormat:   "format",
				SpecVersion:  1,
				Version:     99,
				Components:  nil,
				Dependencies: depsPtr([]cdx.Dependency{
					{
						Ref: "pkg:file:not-include-1",
					},
					{
						Ref: "include-1:pkg:file",
					},
					{
						Ref: "pkg:file:not-include-2",
					},
					{
						Ref: "include-2:pkg:file",
					},
					{
						Ref: "include-3:pkg:not-a-file",
					},
					{
						Ref: "pkg:not-a-file:include-4",
					},
				}),
			},
			want: cdx.BOM{
				BOMFormat:   "format",
				SpecVersion:  1,
				Version:     99,
				Components:  nil,
				Dependencies: depsPtr([]cdx.Dependency{
					{
						Ref: "pkg:not-a-file:include-4",
					},
					{
						Ref: "include-1:pkg:file",
					},
					{
						Ref: "include-3:pkg:not-a-file",
					},
					{
						Ref: "include-2:pkg:file",
					},
				}),
			},
		},
		{
			name: "check_deps_of_deps",
			originalSbom: cdx.BOM{
				BOMFormat:   "format-foofoo",
				SpecVersion: 111,
				Version:     86,
				Components:  nil,
				Dependencies: depsPtr([]cdx.Dependency{
					{
						Ref: "pkg:not-a-file:not-include-4-file-deps",
						Dependencies: depsPtr([]*string{
							{
								"pkg:file:1",
							},
							{
								Ref: "pkg:file:2",
							},
						}),
					},
					{
						Ref:          "pkg:not-a-file:not-include-4-no-deps",
						Dependencies: depsPtr([]cdx.Dependency{}),
					},
					{
						Ref: "pkg:not-a-file:not-include-4-file-deps",
						Dependencies: depsPtr([]cdx.Dependency{
							{
								Ref: "pkg:not-a-file-1",
							},
							{
								Ref: "pkg:file:1",
							},
							{
								Ref: "pkg:file:2",
							},
							{
								Ref: "pkg:not-a-file-2",
							},
						}),
					},
				}),
			},
			want: cdx.BOM{
				BOMFormat:   "format-foofoo",
				SpecVersion: 111,
				Version:     86,
				Components:  nil,
				Dependencies: depsPtr([]cdx.Dependency{
					{
						Ref:          "pkg:not-a-file:not-include-4-file-deps",
						Dependencies: nil,
					},
					{
						Ref:          "pkg:not-a-file:not-include-4-no-deps",
						Dependencies: nil,
					},
					{
						Ref: "pkg:not-a-file:not-include-4-file-deps",
						Dependencies: depsPtr([]cdx.Dependency{
							{
								Ref: "pkg:not-a-file-1",
							},
							{
								Ref: "pkg:not-a-file-2",
							},
						}),
					},
				}),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pres, err := NewCycloneDxManager(JsonFormat)
			assert.NoError(t, err)

			b := new(bytes.Buffer)
			assert.NoError(t, pres.Encode(b, &tt.originalSbom))
			got, err := pres.ExtractConcise(b)
			assert.NoError(t, err)

			exp := new(bytes.Buffer)
			assert.NoError(t, pres.Encode(exp, &tt.want))

			s := got.String()
			assert.JSONEq(t, exp.String(), s)
		})
	}
}

func compPtr(in []cdx.Component) *[]cdx.Component {
	return &in
}

func depsPtr(in []cdx.Dependency) *[]cdx.Dependency {
	return &in
}
