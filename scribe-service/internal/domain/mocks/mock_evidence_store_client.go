// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scribe-security/scribe2/scribe-service/internal/domain (interfaces: EvidenceStoreClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/scribe-security/scribe2/scribe-service/internal/domain"
)

// MockEvidenceStoreClient is a mock of EvidenceStoreClient interface.
type MockEvidenceStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockEvidenceStoreClientMockRecorder
}

// MockEvidenceStoreClientMockRecorder is the mock recorder for MockEvidenceStoreClient.
type MockEvidenceStoreClientMockRecorder struct {
	mock *MockEvidenceStoreClient
}

// NewMockEvidenceStoreClient creates a new mock instance.
func NewMockEvidenceStoreClient(ctrl *gomock.Controller) *MockEvidenceStoreClient {
	mock := &MockEvidenceStoreClient{ctrl: ctrl}
	mock.recorder = &MockEvidenceStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvidenceStoreClient) EXPECT() *MockEvidenceStoreClientMockRecorder {
	return m.recorder
}

// CallFinishEvidence mocks base method.
func (m *MockEvidenceStoreClient) CallFinishEvidence(arg0 context.Context, arg1 *domain.CallFinishEvidenceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallFinishEvidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallFinishEvidence indicates an expected call of CallFinishEvidence.
func (mr *MockEvidenceStoreClientMockRecorder) CallFinishEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallFinishEvidence", reflect.TypeOf((*MockEvidenceStoreClient)(nil).CallFinishEvidence), arg0, arg1)
}

// CallUploadEvidence mocks base method.
func (m *MockEvidenceStoreClient) CallUploadEvidence(arg0 context.Context, arg1 *domain.CallUploadEvidenceInput) (*domain.CreateEvidenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallUploadEvidence", arg0, arg1)
	ret0, _ := ret[0].(*domain.CreateEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallUploadEvidence indicates an expected call of CallUploadEvidence.
func (mr *MockEvidenceStoreClientMockRecorder) CallUploadEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallUploadEvidence", reflect.TypeOf((*MockEvidenceStoreClient)(nil).CallUploadEvidence), arg0, arg1)
}

// UploadFileToS3 mocks base method.
func (m *MockEvidenceStoreClient) UploadFileToS3(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileToS3", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileToS3 indicates an expected call of UploadFileToS3.
func (mr *MockEvidenceStoreClientMockRecorder) UploadFileToS3(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileToS3", reflect.TypeOf((*MockEvidenceStoreClient)(nil).UploadFileToS3), arg0, arg1, arg2)
}
