// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scribe-security/scribe2/scribe-service/internal/domain (interfaces: EvidenceStoreService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/scribe-security/scribe2/scribe-service/internal/domain"
)

// MockEvidenceStoreService is a mock of EvidenceStoreService interface.
type MockEvidenceStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockEvidenceStoreServiceMockRecorder
}

// MockEvidenceStoreServiceMockRecorder is the mock recorder for MockEvidenceStoreService.
type MockEvidenceStoreServiceMockRecorder struct {
	mock *MockEvidenceStoreService
}

// NewMockEvidenceStoreService creates a new mock instance.
func NewMockEvidenceStoreService(ctrl *gomock.Controller) *MockEvidenceStoreService {
	mock := &MockEvidenceStoreService{ctrl: ctrl}
	mock.recorder = &MockEvidenceStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvidenceStoreService) EXPECT() *MockEvidenceStoreServiceMockRecorder {
	return m.recorder
}

// CreateEvidence mocks base method.
func (m *MockEvidenceStoreService) CreateEvidence(arg0 context.Context, arg1 *domain.UploadEvidenceFileTransfer) (*domain.CreateEvidenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvidence", arg0, arg1)
	ret0, _ := ret[0].(*domain.CreateEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvidence indicates an expected call of CreateEvidence.
func (mr *MockEvidenceStoreServiceMockRecorder) CreateEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvidence", reflect.TypeOf((*MockEvidenceStoreService)(nil).CreateEvidence), arg0, arg1)
}

// DeleteEvidence mocks base method.
func (m *MockEvidenceStoreService) DeleteEvidence(arg0 context.Context, arg1 *domain.DeleteEvidenceServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvidence indicates an expected call of DeleteEvidence.
func (mr *MockEvidenceStoreServiceMockRecorder) DeleteEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvidence", reflect.TypeOf((*MockEvidenceStoreService)(nil).DeleteEvidence), arg0, arg1)
}

// DisableGithubInstallation mocks base method.
func (m *MockEvidenceStoreService) DisableGithubInstallation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableGithubInstallation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableGithubInstallation indicates an expected call of DisableGithubInstallation.
func (mr *MockEvidenceStoreServiceMockRecorder) DisableGithubInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableGithubInstallation", reflect.TypeOf((*MockEvidenceStoreService)(nil).DisableGithubInstallation), arg0, arg1)
}

// EnableGithubInstallation mocks base method.
func (m *MockEvidenceStoreService) EnableGithubInstallation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableGithubInstallation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableGithubInstallation indicates an expected call of EnableGithubInstallation.
func (mr *MockEvidenceStoreServiceMockRecorder) EnableGithubInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableGithubInstallation", reflect.TypeOf((*MockEvidenceStoreService)(nil).EnableGithubInstallation), arg0, arg1)
}

// FinishEvidenceFileTransfer mocks base method.
func (m *MockEvidenceStoreService) FinishEvidenceFileTransfer(arg0 context.Context, arg1 *domain.FinishUploadEvidenceWithTeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishEvidenceFileTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishEvidenceFileTransfer indicates an expected call of FinishEvidenceFileTransfer.
func (mr *MockEvidenceStoreServiceMockRecorder) FinishEvidenceFileTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishEvidenceFileTransfer", reflect.TypeOf((*MockEvidenceStoreService)(nil).FinishEvidenceFileTransfer), arg0, arg1)
}

// GetEvidenceDownload mocks base method.
func (m *MockEvidenceStoreService) GetEvidenceDownload(arg0 context.Context, arg1 *domain.GetEvidenceDownloadInput) (*domain.GetEvidenceDownloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceDownload", arg0, arg1)
	ret0, _ := ret[0].(*domain.GetEvidenceDownloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceDownload indicates an expected call of GetEvidenceDownload.
func (mr *MockEvidenceStoreServiceMockRecorder) GetEvidenceDownload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceDownload", reflect.TypeOf((*MockEvidenceStoreService)(nil).GetEvidenceDownload), arg0, arg1)
}

// GetLastPipelineRunForRepos mocks base method.
func (m *MockEvidenceStoreService) GetLastPipelineRunForRepos(arg0 context.Context, arg1 ...string) (*domain.PipelineRunObj, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastPipelineRunForRepos", varargs...)
	ret0, _ := ret[0].(*domain.PipelineRunObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPipelineRunForRepos indicates an expected call of GetLastPipelineRunForRepos.
func (mr *MockEvidenceStoreServiceMockRecorder) GetLastPipelineRunForRepos(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPipelineRunForRepos", reflect.TypeOf((*MockEvidenceStoreService)(nil).GetLastPipelineRunForRepos), varargs...)
}

// GetPresignedURLandAttrs mocks base method.
func (m *MockEvidenceStoreService) GetPresignedURLandAttrs(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURLandAttrs", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURLandAttrs indicates an expected call of GetPresignedURLandAttrs.
func (mr *MockEvidenceStoreServiceMockRecorder) GetPresignedURLandAttrs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURLandAttrs", reflect.TypeOf((*MockEvidenceStoreService)(nil).GetPresignedURLandAttrs), arg0, arg1)
}

// GetTeamID mocks base method.
func (m *MockEvidenceStoreService) GetTeamID(arg0 context.Context, arg1 *string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamID indicates an expected call of GetTeamID.
func (mr *MockEvidenceStoreServiceMockRecorder) GetTeamID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamID", reflect.TypeOf((*MockEvidenceStoreService)(nil).GetTeamID), arg0, arg1)
}

// GetTeamName mocks base method.
func (m *MockEvidenceStoreService) GetTeamName(arg0 context.Context, arg1 *string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamName indicates an expected call of GetTeamName.
func (mr *MockEvidenceStoreServiceMockRecorder) GetTeamName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamName", reflect.TypeOf((*MockEvidenceStoreService)(nil).GetTeamName), arg0, arg1)
}

// ListReports mocks base method.
func (m *MockEvidenceStoreService) ListReports(arg0 context.Context, arg1 *json.RawMessage, arg2 int64) ([]domain.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReports", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReports indicates an expected call of ListReports.
func (mr *MockEvidenceStoreServiceMockRecorder) ListReports(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReports", reflect.TypeOf((*MockEvidenceStoreService)(nil).ListReports), arg0, arg1, arg2)
}

// SendMixpanelEvent mocks base method.
func (m *MockEvidenceStoreService) SendMixpanelEvent(arg0 context.Context, arg1 *domain.SendMixpanelEventInputs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMixpanelEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMixpanelEvent indicates an expected call of SendMixpanelEvent.
func (mr *MockEvidenceStoreServiceMockRecorder) SendMixpanelEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMixpanelEvent", reflect.TypeOf((*MockEvidenceStoreService)(nil).SendMixpanelEvent), arg0, arg1)
}

// TriggerETL mocks base method.
func (m *MockEvidenceStoreService) TriggerETL(arg0 context.Context, arg1 domain.TriggerETLPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerETL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerETL indicates an expected call of TriggerETL.
func (mr *MockEvidenceStoreServiceMockRecorder) TriggerETL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerETL", reflect.TypeOf((*MockEvidenceStoreService)(nil).TriggerETL), arg0, arg1)
}
