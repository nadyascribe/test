// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scribe-security/scribe2/scribe-service/internal/domain (interfaces: EvidenceStoreRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/scribe-security/scribe2/scribe-service/internal/domain"
)

// MockEvidenceStoreRepository is a mock of EvidenceStoreRepository interface.
type MockEvidenceStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEvidenceStoreRepositoryMockRecorder
}

// MockEvidenceStoreRepositoryMockRecorder is the mock recorder for MockEvidenceStoreRepository.
type MockEvidenceStoreRepositoryMockRecorder struct {
	mock *MockEvidenceStoreRepository
}

// NewMockEvidenceStoreRepository creates a new mock instance.
func NewMockEvidenceStoreRepository(ctrl *gomock.Controller) *MockEvidenceStoreRepository {
	mock := &MockEvidenceStoreRepository{ctrl: ctrl}
	mock.recorder = &MockEvidenceStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvidenceStoreRepository) EXPECT() *MockEvidenceStoreRepositoryMockRecorder {
	return m.recorder
}

// CreateEvidence mocks base method.
func (m *MockEvidenceStoreRepository) CreateEvidence(arg0 context.Context, arg1 *domain.UploadEvidenceFileTransfer, arg2 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvidence", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvidence indicates an expected call of CreateEvidence.
func (mr *MockEvidenceStoreRepositoryMockRecorder) CreateEvidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvidence", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).CreateEvidence), arg0, arg1, arg2)
}

// CreatePipelineRun mocks base method.
func (m *MockEvidenceStoreRepository) CreatePipelineRun(arg0 context.Context, arg1 *domain.PipelineRunObj) (*domain.PipelineRunObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineRun", arg0, arg1)
	ret0, _ := ret[0].(*domain.PipelineRunObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipelineRun indicates an expected call of CreatePipelineRun.
func (mr *MockEvidenceStoreRepositoryMockRecorder) CreatePipelineRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineRun", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).CreatePipelineRun), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockEvidenceStoreRepository) CreateProduct(arg0 context.Context, arg1 *domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockEvidenceStoreRepositoryMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).CreateProduct), arg0, arg1)
}

// DeleteEvidence mocks base method.
func (m *MockEvidenceStoreRepository) DeleteEvidence(arg0 context.Context, arg1 *domain.DeleteEvidenceRepoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvidence indicates an expected call of DeleteEvidence.
func (mr *MockEvidenceStoreRepositoryMockRecorder) DeleteEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvidence", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).DeleteEvidence), arg0, arg1)
}

// DisableGithubInstallation mocks base method.
func (m *MockEvidenceStoreRepository) DisableGithubInstallation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableGithubInstallation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableGithubInstallation indicates an expected call of DisableGithubInstallation.
func (mr *MockEvidenceStoreRepositoryMockRecorder) DisableGithubInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableGithubInstallation", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).DisableGithubInstallation), arg0, arg1)
}

// EnableGithubInstallation mocks base method.
func (m *MockEvidenceStoreRepository) EnableGithubInstallation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableGithubInstallation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableGithubInstallation indicates an expected call of EnableGithubInstallation.
func (mr *MockEvidenceStoreRepositoryMockRecorder) EnableGithubInstallation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableGithubInstallation", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).EnableGithubInstallation), arg0, arg1)
}

// FinishUploadEvidence mocks base method.
func (m *MockEvidenceStoreRepository) FinishUploadEvidence(arg0 context.Context, arg1 *domain.FinishUploadEvidenceWithTeamID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishUploadEvidence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishUploadEvidence indicates an expected call of FinishUploadEvidence.
func (mr *MockEvidenceStoreRepositoryMockRecorder) FinishUploadEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishUploadEvidence", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).FinishUploadEvidence), arg0, arg1)
}

// GetEvidenceByID mocks base method.
func (m *MockEvidenceStoreRepository) GetEvidenceByID(arg0 context.Context, arg1 int) (*domain.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceByID indicates an expected call of GetEvidenceByID.
func (mr *MockEvidenceStoreRepositoryMockRecorder) GetEvidenceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByID", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).GetEvidenceByID), arg0, arg1)
}

// GetEvidenceByKey mocks base method.
func (m *MockEvidenceStoreRepository) GetEvidenceByKey(arg0 context.Context, arg1 string) (*domain.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceByKey", arg0, arg1)
	ret0, _ := ret[0].(*domain.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceByKey indicates an expected call of GetEvidenceByKey.
func (mr *MockEvidenceStoreRepositoryMockRecorder) GetEvidenceByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByKey", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).GetEvidenceByKey), arg0, arg1)
}

// GetPipelineRun mocks base method.
func (m *MockEvidenceStoreRepository) GetPipelineRun(arg0 context.Context, arg1 *domain.GetPipelineRunInput) (*domain.PipelineRunObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRun", arg0, arg1)
	ret0, _ := ret[0].(*domain.PipelineRunObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRun indicates an expected call of GetPipelineRun.
func (mr *MockEvidenceStoreRepositoryMockRecorder) GetPipelineRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRun", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).GetPipelineRun), arg0, arg1)
}

// GetPipelineRunByGitURLs mocks base method.
func (m *MockEvidenceStoreRepository) GetPipelineRunByGitURLs(arg0 context.Context, arg1 ...string) (*domain.PipelineRunObj, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineRunByGitURLs", varargs...)
	ret0, _ := ret[0].(*domain.PipelineRunObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRunByGitURLs indicates an expected call of GetPipelineRunByGitURLs.
func (mr *MockEvidenceStoreRepositoryMockRecorder) GetPipelineRunByGitURLs(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRunByGitURLs", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).GetPipelineRunByGitURLs), varargs...)
}

// GetProduct mocks base method.
func (m *MockEvidenceStoreRepository) GetProduct(arg0 context.Context, arg1 string, arg2 int64) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockEvidenceStoreRepositoryMockRecorder) GetProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).GetProduct), arg0, arg1, arg2)
}

// GetTeamIDByTokenSub mocks base method.
func (m *MockEvidenceStoreRepository) GetTeamIDByTokenSub(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamIDByTokenSub", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamIDByTokenSub indicates an expected call of GetTeamIDByTokenSub.
func (mr *MockEvidenceStoreRepositoryMockRecorder) GetTeamIDByTokenSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamIDByTokenSub", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).GetTeamIDByTokenSub), arg0, arg1)
}

// ListEvidence mocks base method.
func (m *MockEvidenceStoreRepository) ListEvidence(arg0 context.Context, arg1 *json.RawMessage, arg2 int64) ([]domain.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvidence", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvidence indicates an expected call of ListEvidence.
func (mr *MockEvidenceStoreRepositoryMockRecorder) ListEvidence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvidence", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).ListEvidence), arg0, arg1, arg2)
}

// UpdateContext mocks base method.
func (m *MockEvidenceStoreRepository) UpdateContext(arg0 context.Context, arg1 int, arg2 *json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContext indicates an expected call of UpdateContext.
func (mr *MockEvidenceStoreRepositoryMockRecorder) UpdateContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContext", reflect.TypeOf((*MockEvidenceStoreRepository)(nil).UpdateContext), arg0, arg1, arg2)
}
