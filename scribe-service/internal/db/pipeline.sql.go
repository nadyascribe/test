// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: pipeline.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/lib/pq"
)

const createPipelineRun = `-- name: CreatePipelineRun :one
INSERT INTO osint."PipelineRun" (
    "productKey",
    "pipelineName",
    "pipelineRun",
    "context",
    "version",
    "team"
) VALUES (
    $1::TEXT,
    $2::TEXT,
    $3::TEXT,
    $4::JSONB,
    $5::TEXT,
    $6::BIGINT
)
RETURNING id, "productKey", "pipelineName", "pipelineRun", context, version, timestamp, team, deleted
`

type CreatePipelineRunParams struct {
	Productkey   string          `json:"productkey"`
	Pipelinename string          `json:"pipelinename"`
	Pipelinerun  string          `json:"pipelinerun"`
	Context      json.RawMessage `json:"context"`
	Version      string          `json:"version"`
	Team         int64           `json:"team"`
}

func (q *Queries) CreatePipelineRun(ctx context.Context, arg CreatePipelineRunParams) (OsintPipelineRun, error) {
	row := q.queryRow(ctx, q.createPipelineRunStmt, createPipelineRun,
		arg.Productkey,
		arg.Pipelinename,
		arg.Pipelinerun,
		arg.Context,
		arg.Version,
		arg.Team,
	)
	var i OsintPipelineRun
	err := row.Scan(
		&i.ID,
		&i.ProductKey,
		&i.PipelineName,
		&i.PipelineRun,
		&i.Context,
		&i.Version,
		&i.Timestamp,
		&i.Team,
		&i.Deleted,
	)
	return i, err
}

const getPipelineRun = `-- name: GetPipelineRun :one
SELECT
    id, "productKey", "pipelineName", "pipelineRun", context, version, timestamp, team, deleted
FROM
    osint."PipelineRun"
WHERE
    $1::TEXT = "productKey" AND
    $2::TEXT = "pipelineName" AND
    $3::TEXT = "pipelineRun" AND
    $4::BIGINT = team
`

type GetPipelineRunParams struct {
	Productkey   string `json:"productkey"`
	Pipelinename string `json:"pipelinename"`
	Pipelinerun  string `json:"pipelinerun"`
	Team         int64  `json:"team"`
}

func (q *Queries) GetPipelineRun(ctx context.Context, arg GetPipelineRunParams) (OsintPipelineRun, error) {
	row := q.queryRow(ctx, q.getPipelineRunStmt, getPipelineRun,
		arg.Productkey,
		arg.Pipelinename,
		arg.Pipelinerun,
		arg.Team,
	)
	var i OsintPipelineRun
	err := row.Scan(
		&i.ID,
		&i.ProductKey,
		&i.PipelineName,
		&i.PipelineRun,
		&i.Context,
		&i.Version,
		&i.Timestamp,
		&i.Team,
		&i.Deleted,
	)
	return i, err
}

const getPipelineRunByGitURL = `-- name: GetPipelineRunByGitURL :one
SELECT
    id, "productKey", "pipelineName", "pipelineRun", context, version, timestamp, team, deleted
FROM
    osint."PipelineRun"
WHERE
    (context ->> 'git_url') = ANY($1::TEXT[])
ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetPipelineRunByGitURL(ctx context.Context, giturls []string) (OsintPipelineRun, error) {
	row := q.queryRow(ctx, q.getPipelineRunByGitURLStmt, getPipelineRunByGitURL, pq.Array(giturls))
	var i OsintPipelineRun
	err := row.Scan(
		&i.ID,
		&i.ProductKey,
		&i.PipelineName,
		&i.PipelineRun,
		&i.Context,
		&i.Version,
		&i.Timestamp,
		&i.Team,
		&i.Deleted,
	)
	return i, err
}
