// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: team.sql

package db

import (
	"context"
)

const getTeamByClientID = `-- name: GetTeamByClientID :one
SELECT
    id, name, "clientId", "gitHubAppInstallationId", "gitHubAppInstallationActive", fts
FROM
    app."Team"
WHERE
    "clientId" = $1
`

func (q *Queries) GetTeamByClientID(ctx context.Context, clientid *string) (AppTeam, error) {
	row := q.queryRow(ctx, q.getTeamByClientIDStmt, getTeamByClientID, clientid)
	var i AppTeam
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientId,
		&i.GitHubAppInstallationId,
		&i.GitHubAppInstallationActive,
		&i.Fts,
	)
	return i, err
}

const getTeamIDByName = `-- name: GetTeamIDByName :one
SELECT
    id, name, "clientId", "gitHubAppInstallationId", "gitHubAppInstallationActive", fts
FROM
    app."Team"
WHERE
    $1::TEXT = name
`

func (q *Queries) GetTeamIDByName(ctx context.Context, teamname string) (AppTeam, error) {
	row := q.queryRow(ctx, q.getTeamIDByNameStmt, getTeamIDByName, teamname)
	var i AppTeam
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientId,
		&i.GitHubAppInstallationId,
		&i.GitHubAppInstallationActive,
		&i.Fts,
	)
	return i, err
}
