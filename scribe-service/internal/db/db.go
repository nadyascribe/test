// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createEvidenceStmt, err = db.PrepareContext(ctx, createEvidence); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEvidence: %w", err)
	}
	if q.createPipelineRunStmt, err = db.PrepareContext(ctx, createPipelineRun); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePipelineRun: %w", err)
	}
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.deleteEvidenceStmt, err = db.PrepareContext(ctx, deleteEvidence); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEvidence: %w", err)
	}
	if q.disableGithubInstallationStmt, err = db.PrepareContext(ctx, disableGithubInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query DisableGithubInstallation: %w", err)
	}
	if q.enableGithubInstallationStmt, err = db.PrepareContext(ctx, enableGithubInstallation); err != nil {
		return nil, fmt.Errorf("error preparing query EnableGithubInstallation: %w", err)
	}
	if q.getEvidenceByFileIDStmt, err = db.PrepareContext(ctx, getEvidenceByFileID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEvidenceByFileID: %w", err)
	}
	if q.getEvidenceByKeyStmt, err = db.PrepareContext(ctx, getEvidenceByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetEvidenceByKey: %w", err)
	}
	if q.getPipelineRunStmt, err = db.PrepareContext(ctx, getPipelineRun); err != nil {
		return nil, fmt.Errorf("error preparing query GetPipelineRun: %w", err)
	}
	if q.getPipelineRunByGitURLStmt, err = db.PrepareContext(ctx, getPipelineRunByGitURL); err != nil {
		return nil, fmt.Errorf("error preparing query GetPipelineRunByGitURL: %w", err)
	}
	if q.getProductStmt, err = db.PrepareContext(ctx, getProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetProduct: %w", err)
	}
	if q.getTeamByClientIDStmt, err = db.PrepareContext(ctx, getTeamByClientID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamByClientID: %w", err)
	}
	if q.getTeamIDByNameStmt, err = db.PrepareContext(ctx, getTeamIDByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamIDByName: %w", err)
	}
	if q.listEvidenceStmt, err = db.PrepareContext(ctx, listEvidence); err != nil {
		return nil, fmt.Errorf("error preparing query ListEvidence: %w", err)
	}
	if q.setEvidenceStateStmt, err = db.PrepareContext(ctx, setEvidenceState); err != nil {
		return nil, fmt.Errorf("error preparing query SetEvidenceState: %w", err)
	}
	if q.updateContextStmt, err = db.PrepareContext(ctx, updateContext); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateContext: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createEvidenceStmt != nil {
		if cerr := q.createEvidenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEvidenceStmt: %w", cerr)
		}
	}
	if q.createPipelineRunStmt != nil {
		if cerr := q.createPipelineRunStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPipelineRunStmt: %w", cerr)
		}
	}
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.deleteEvidenceStmt != nil {
		if cerr := q.deleteEvidenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEvidenceStmt: %w", cerr)
		}
	}
	if q.disableGithubInstallationStmt != nil {
		if cerr := q.disableGithubInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableGithubInstallationStmt: %w", cerr)
		}
	}
	if q.enableGithubInstallationStmt != nil {
		if cerr := q.enableGithubInstallationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enableGithubInstallationStmt: %w", cerr)
		}
	}
	if q.getEvidenceByFileIDStmt != nil {
		if cerr := q.getEvidenceByFileIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEvidenceByFileIDStmt: %w", cerr)
		}
	}
	if q.getEvidenceByKeyStmt != nil {
		if cerr := q.getEvidenceByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEvidenceByKeyStmt: %w", cerr)
		}
	}
	if q.getPipelineRunStmt != nil {
		if cerr := q.getPipelineRunStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPipelineRunStmt: %w", cerr)
		}
	}
	if q.getPipelineRunByGitURLStmt != nil {
		if cerr := q.getPipelineRunByGitURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPipelineRunByGitURLStmt: %w", cerr)
		}
	}
	if q.getProductStmt != nil {
		if cerr := q.getProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStmt: %w", cerr)
		}
	}
	if q.getTeamByClientIDStmt != nil {
		if cerr := q.getTeamByClientIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamByClientIDStmt: %w", cerr)
		}
	}
	if q.getTeamIDByNameStmt != nil {
		if cerr := q.getTeamIDByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamIDByNameStmt: %w", cerr)
		}
	}
	if q.listEvidenceStmt != nil {
		if cerr := q.listEvidenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEvidenceStmt: %w", cerr)
		}
	}
	if q.setEvidenceStateStmt != nil {
		if cerr := q.setEvidenceStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setEvidenceStateStmt: %w", cerr)
		}
	}
	if q.updateContextStmt != nil {
		if cerr := q.updateContextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateContextStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createEvidenceStmt            *sql.Stmt
	createPipelineRunStmt         *sql.Stmt
	createProductStmt             *sql.Stmt
	deleteEvidenceStmt            *sql.Stmt
	disableGithubInstallationStmt *sql.Stmt
	enableGithubInstallationStmt  *sql.Stmt
	getEvidenceByFileIDStmt       *sql.Stmt
	getEvidenceByKeyStmt          *sql.Stmt
	getPipelineRunStmt            *sql.Stmt
	getPipelineRunByGitURLStmt    *sql.Stmt
	getProductStmt                *sql.Stmt
	getTeamByClientIDStmt         *sql.Stmt
	getTeamIDByNameStmt           *sql.Stmt
	listEvidenceStmt              *sql.Stmt
	setEvidenceStateStmt          *sql.Stmt
	updateContextStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createEvidenceStmt:            q.createEvidenceStmt,
		createPipelineRunStmt:         q.createPipelineRunStmt,
		createProductStmt:             q.createProductStmt,
		deleteEvidenceStmt:            q.deleteEvidenceStmt,
		disableGithubInstallationStmt: q.disableGithubInstallationStmt,
		enableGithubInstallationStmt:  q.enableGithubInstallationStmt,
		getEvidenceByFileIDStmt:       q.getEvidenceByFileIDStmt,
		getEvidenceByKeyStmt:          q.getEvidenceByKeyStmt,
		getPipelineRunStmt:            q.getPipelineRunStmt,
		getPipelineRunByGitURLStmt:    q.getPipelineRunByGitURLStmt,
		getProductStmt:                q.getProductStmt,
		getTeamByClientIDStmt:         q.getTeamByClientIDStmt,
		getTeamIDByNameStmt:           q.getTeamIDByNameStmt,
		listEvidenceStmt:              q.listEvidenceStmt,
		setEvidenceStateStmt:          q.setEvidenceStateStmt,
		updateContextStmt:             q.updateContextStmt,
	}
}
