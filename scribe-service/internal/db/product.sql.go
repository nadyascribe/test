// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO app."Product" (
    "name",
    "teamId",
    "key",
    "userDefinedKey")
VALUES (
    $1::TEXT,
    $2::BIGINT,
    $3::TEXT,
    $4::TEXT
)
RETURNING id, name, "teamId", key, "userDefinedKey", fts
`

type CreateProductParams struct {
	Name           string `json:"name"`
	Teamid         int64  `json:"teamid"`
	Key            string `json:"key"`
	Userdefinedkey string `json:"userdefinedkey"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (AppProduct, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.Name,
		arg.Teamid,
		arg.Key,
		arg.Userdefinedkey,
	)
	var i AppProduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeamId,
		&i.Key,
		&i.UserDefinedKey,
		&i.Fts,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT 
    id, name, "teamId", key, "userDefinedKey", fts 
FROM 
    app."Product"
WHERE 
    "userDefinedKey" = $1::TEXT AND "teamId" = $2::BIGINT
`

type GetProductParams struct {
	Userdefinedkey string `json:"userdefinedkey"`
	Teamid         int64  `json:"teamid"`
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (AppProduct, error) {
	row := q.queryRow(ctx, q.getProductStmt, getProduct, arg.Userdefinedkey, arg.Teamid)
	var i AppProduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeamId,
		&i.Key,
		&i.UserDefinedKey,
		&i.Fts,
	)
	return i, err
}
