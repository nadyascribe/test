openapi: 3.0.1
info:
  title: Scribe API.
  termsOfService: TBD
  contact:
    name: Ori Avraham
    email: ori@scribesecurity.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: 0.0.1
servers:
- url: http://localhost:4000/
- url: https://localhost:4000/
security:
- JWT: []
paths:
  /evidence:
    post:
      tags:
      - evidence
      summary: Create presigned URL to POST file content.
      description: |-
        This endpoint is used to upload evidence to the cloud storage.
        It returns a presigned URL to upload the file content.
        After uploading the file content, the client should call `/evidence/finish`.
      operationId: uploadEvidenceAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadEvidence'
        required: false
      responses:
        200:
          description: createEvidenceOutput
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEvidenceOutput'
        400:
          description: ResponseError represent the reseponse error struct
          headers:
            code:
              schema:
                type: integer
                format: int64
            message:
              schema:
                type: string
          content: {}
      security:
      - JWT: []
      x-codegen-request-body-name: Body
  /evidence/{file_id}:
    get:
      tags:
      - evidence
      summary: Get presigned S3 URL for download.
      description: |-
        This endpoint is used to download evidence from the cloud storage.
        Use <b>file_id</b> in the request to get presigned S3 URL for download.
      operationId: downloadEvidenceAction
      parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          x-go-name: FileID
        x-go-name: FileID
      responses:
        200:
          description: getEvidenceDownloadOutput
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEvidenceDownloadOutput'
        400:
          description: ResponseError represent the reseponse error struct
          headers:
            code:
              schema:
                type: integer
                format: int64
            message:
              schema:
                type: string
          content: {}
      security:
      - JWT: []
    delete:
      tags:
      - evidence
      summary: Delete evidence object.
      description: <p>Delete evidence object by <b>file_id</b>.
      operationId: deleteEvidenceAction
      parameters:
      - name: file_id
        in: path
        description: FileID if not null used to delete only one file
        required: true
        schema:
          type: integer
          format: int64
          x-go-name: FileID
        x-go-name: FileID
      - name: key
        in: query
        description: Key pattern to delete all files matched to it, this field ignored
          if "file_id" is set
        schema:
          type: string
          x-go-name: Key
        x-go-name: Key
      responses:
        200:
          description: ""
          content: {}
        400:
          description: ResponseError represent the reseponse error struct
          headers:
            code:
              schema:
                type: integer
                format: int64
            message:
              schema:
                type: string
          content: {}
      security:
      - JWT: []
  /evidence/finish:
    post:
      tags:
      - evidence
      summary: Mark file transfer as finished.
      description: Push file transfer result after POST file content.
      operationId: finishUploadEvidenceAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishUploadEvidence'
        required: false
      responses:
        200:
          description: ""
          content: {}
        400:
          description: ResponseError represent the reseponse error struct
          headers:
            code:
              schema:
                type: integer
                format: int64
            message:
              schema:
                type: string
          content: {}
        500:
          description: ResponseError represent the reseponse error struct
          headers:
            code:
              schema:
                type: integer
                format: int64
            message:
              schema:
                type: string
          content: {}
      security:
      - JWT: []
      x-codegen-request-body-name: Body
  /evidence/list:
    post:
      tags:
      - evidence
      summary: Get a list of processes for specific queries.
      operationId: ListEvidenceAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllContext'
        required: false
      responses:
        200:
          description: listEvidenceViewOutput
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listEvidenceViewOutput'
        400:
          description: ResponseError represent the reseponse error struct
          headers:
            code:
              schema:
                type: integer
                format: int64
            message:
              schema:
                type: string
          content: {}
      security:
      - JWT: []
      x-codegen-request-body-name: Body
components:
  schemas:
    AccessMode:
      title: AccessMode defines the access mode of a volume.
      type: object
      properties:
        BlockVolume:
          $ref: '#/components/schemas/TypeBlock'
        MountVolume:
          $ref: '#/components/schemas/TypeMount'
        Scope:
          $ref: '#/components/schemas/Scope'
        Sharing:
          $ref: '#/components/schemas/SharingMode'
      x-go-package: github.com/docker/docker/api/types/volume
    AllContext:
      type: object
      properties:
        actor:
          type: string
          x-go-name: Actor
        build_num:
          type: string
          x-go-name: BuildNum
        content_type:
          type: string
          x-go-name: ContentType
        context_type:
          type: string
          x-go-name: ContextType
        dir_id:
          type: string
          x-go-name: DirID
        dir_path:
          type: string
          x-go-name: DirPath
        file_id:
          type: string
          x-go-name: FileID
        file_path:
          type: string
          x-go-name: FilePath
        git_branch:
          type: string
          x-go-name: GitBranch
        git_commit:
          type: string
          x-go-name: GitCommit
        git_ref:
          type: string
          x-go-name: GitRef
        git_tag:
          type: string
          x-go-name: GitTag
        git_url:
          type: string
          x-go-name: GitURL
        image_name:
          type: string
          x-go-name: ImageName
        imageID:
          type: string
          x-go-name: ImageID
        imageTag:
          type: array
          items:
            type: string
          x-go-name: Tags
        input_name:
          type: string
          x-go-name: InputNameF
        input_scheme:
          type: string
          x-go-name: InputSchemeF
        input_tag:
          type: string
          x-go-name: InputTagF
        job_name:
          type: string
          x-go-name: JobName
        labels:
          type: array
          items:
            type: string
          x-go-name: Labels
        name:
          type: string
          x-go-name: NameField
        predicate_type:
          type: string
          x-go-name: PredicateType
        repoDigest:
          type: array
          items:
            type: string
          x-go-name: RepoDigest
        run_id:
          type: string
          x-go-name: RunID
        sbomgroup:
          type: string
          x-go-name: Group
        sbomhashs:
          type: array
          items:
            type: string
          x-go-name: Hashs
        sbomname:
          type: string
          x-go-name: Name
        sbompurl:
          type: string
          x-go-name: Purl
        sbomversion:
          type: string
          x-go-name: Version
        target_git_branch:
          type: string
          x-go-name: TargetGitBranch
        target_git_commit:
          type: string
          x-go-name: TargetGitCommit
        target_git_ref:
          type: string
          x-go-name: TargetGitRef
        target_git_tag:
          type: string
          x-go-name: TargetGitTag
        target_git_url:
          type: string
          x-go-name: TargetGitURL
        target_type:
          type: string
          x-go-name: Type
        timestamp:
          type: string
          x-go-name: TimestampField
        workflow:
          type: string
          x-go-name: Workflow
      x-go-package: github.com/scribe-security/cocosign/storer/evidence
    Attestation:
      type: object
      properties:
        contenttype:
          type: string
          x-go-name: ContentType
        context:
          type: object
          properties: {}
          x-go-name: Context
        contexttype:
          type: string
          x-go-name: ContextType
        id:
          type: integer
          format: int64
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        license:
          type: string
          x-go-name: License
        status:
          $ref: '#/components/schemas/Typeevidencestatus'
        teamid:
          type: integer
          format: int64
          x-go-name: TeamId
        timestamp:
          $ref: '#/components/schemas/NullTime'
        txt:
          type: object
          x-go-name: Txt
        userid:
          type: integer
          format: int64
          x-go-name: UserId
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
    AuthenticateOKBody:
      required:
      - IdentityToken
      - Status
      type: object
      properties:
        IdentityToken:
          type: string
          description: An opaque token used to authenticate a user after a successful
            login
        Status:
          type: string
          description: The status of the authentication
      description: AuthenticateOKBody authenticate o k body
      x-go-package: github.com/docker/docker/api/types/registry
    Availability:
      title: Availability specifies the availability of the volume.
      type: string
      x-go-package: github.com/docker/docker/api/types/volume
    CapacityRange:
      type: object
      properties:
        LimitBytes:
          type: integer
          description: |-
            LimitBytes specifies that a volume must not be bigger than this. The
            value of 0 indicates an unspecified maximum
          format: int64
        RequiredBytes:
          type: integer
          description: |-
            RequiredBytes specifies that a volume must be at least this big. The
            value of 0 indicates an unspecified minimum.
          format: int64
      description: |-
        CapacityRange describes the minimum and maximum capacity a volume should be
        created with
      x-go-package: github.com/docker/docker/api/types/volume
    ClusterVolume:
      type: object
      properties:
        CreatedAt:
          type: string
          format: date-time
        ID:
          type: string
          description: |-
            ID is the Swarm ID of the volume. Because cluster volumes are Swarm
            objects, they have an ID, unlike non-cluster volumes, which only have a
            Name. This ID can be used to refer to the cluster volume.
        Info:
          $ref: '#/components/schemas/Info'
        PublishStatus:
          type: array
          description: |-
            PublishStatus contains the status of the volume as it pertains to its
            publishing on Nodes.
          items:
            $ref: '#/components/schemas/PublishStatus'
        Spec:
          $ref: '#/components/schemas/ClusterVolumeSpec'
        UpdatedAt:
          type: string
          format: date-time
        Version:
          $ref: '#/components/schemas/Version'
      description: |-
        ClusterVolume contains options and information specific to, and only present
        on, Swarm CSI cluster volumes.
      x-go-package: github.com/docker/docker/api/types/volume
    ClusterVolumeSpec:
      title: ClusterVolumeSpec contains the spec used to create this volume.
      type: object
      properties:
        AccessMode:
          $ref: '#/components/schemas/AccessMode'
        AccessibilityRequirements:
          $ref: '#/components/schemas/TopologyRequirement'
        Availability:
          $ref: '#/components/schemas/Availability'
        CapacityRange:
          $ref: '#/components/schemas/CapacityRange'
        Group:
          type: string
          description: |-
            Group defines the volume group of this volume. Volumes belonging to the
            same group can be referred to by group name when creating Services.
            Referring to a volume by group instructs swarm to treat volumes in that
            group interchangeably for the purpose of scheduling. Volumes with an
            empty string for a group technically all belong to the same, emptystring
            group.
        Secrets:
          type: array
          description: |-
            Secrets defines Swarm Secrets that are passed to the CSI storage plugin
            when operating on this volume.
          items:
            $ref: '#/components/schemas/Secret'
      x-go-package: github.com/docker/docker/api/types/volume
    ContainerChangeResponseItem:
      required:
      - Kind
      - Path
      type: object
      properties:
        Kind:
          type: integer
          description: Kind of change
          format: uint8
        Path:
          type: string
          description: Path to file that has changed
      description: ContainerChangeResponseItem change item in response to ContainerChanges
        operation
      x-go-package: github.com/docker/docker/api/types/container
    ContainerTopOKBody:
      required:
      - Processes
      - Titles
      type: object
      properties:
        Processes:
          type: array
          description: |-
            Each process running in the container, where each is process
            is an array of values corresponding to the titles.
          items:
            type: array
            items:
              type: string
        Titles:
          type: array
          description: The ps column titles
          items:
            type: string
      description: ContainerTopOKBody OK response to ContainerTop operation
      x-go-package: github.com/docker/docker/api/types/container
    ContainerUpdateOKBody:
      required:
      - Warnings
      type: object
      properties:
        Warnings:
          type: array
          description: warnings
          items:
            type: string
      description: ContainerUpdateOKBody OK response to ContainerUpdate operation
      x-go-package: github.com/docker/docker/api/types/container
    CreateOptions:
      title: CreateOptions VolumeConfig
      type: object
      properties:
        ClusterVolumeSpec:
          $ref: '#/components/schemas/ClusterVolumeSpec'
        Driver:
          type: string
          description: Name of the volume driver to use.
        DriverOpts:
          type: object
          additionalProperties:
            type: string
          description: |-
            A mapping of driver options and values. These options are
            passed directly to the driver and are driver specific.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        Name:
          type: string
          description: The new volume's name. If not specified, Docker generates a
            name.
      description: Volume configuration
      x-go-package: github.com/docker/docker/api/types/volume
    CreateResponse:
      title: CreateResponse ContainerCreateResponse
      required:
      - Id
      - Warnings
      type: object
      properties:
        Id:
          type: string
          description: The ID of the created container
          x-go-name: ID
        Warnings:
          type: array
          description: Warnings encountered when creating the container
          items:
            type: string
      description: OK response to ContainerCreate operation
      x-go-package: github.com/docker/docker/api/types/container
    ErrorResponse:
      title: ErrorResponse Represents an error.
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: The error message.
          x-go-name: Message
      x-go-package: github.com/docker/docker/api/types
    FinishUploadEvidence:
      type: object
      properties:
        error:
          type: string
          description: Error message, if not nil, transfer will be marked as failed
          x-go-name: Error
        file_id:
          type: integer
          description: FileID of transfer, can be used to link with other objects
          format: int64
          x-go-name: FileID
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
    GraphDriverData:
      required:
      - Data
      - Name
      type: object
      properties:
        Data:
          type: object
          additionalProperties:
            type: string
          description: |-
            Low-level storage metadata, provided as key/value pairs.

            This information is driver-specific, and depends on the storage-driver
            in use, and should be used for informational purposes only.
        Name:
          type: string
          description: Name of the storage driver.
      description: |-
        GraphDriverData Information about the storage driver used to store the container's and
        image's filesystem.
      x-go-package: github.com/docker/docker/api/types
    HistoryResponseItem:
      required:
      - Comment
      - Created
      - CreatedBy
      - Id
      - Size
      - Tags
      type: object
      properties:
        Comment:
          type: string
          description: comment
        Created:
          type: integer
          description: created
          format: int64
        CreatedBy:
          type: string
          description: created by
        Id:
          type: string
          description: Id
          x-go-name: ID
        Size:
          type: integer
          description: size
          format: int64
        Tags:
          type: array
          description: tags
          items:
            type: string
      description: HistoryResponseItem individual image layer information in response
        to ImageHistory operation
      x-go-package: github.com/docker/docker/api/types/image
    IdResponse:
      required:
      - Id
      type: object
      properties:
        Id:
          type: string
          description: The id of the newly created object.
          x-go-name: ID
      description: IDResponse Response to an API call that returns just an Id
      x-go-name: IDResponse
      x-go-package: github.com/docker/docker/api/types
    ImageDeleteResponseItem:
      type: object
      properties:
        Deleted:
          type: string
          description: The image ID of an image that was deleted
        Untagged:
          type: string
          description: The image ID of an image that was untagged
      description: ImageDeleteResponseItem image delete response item
      x-go-package: github.com/docker/docker/api/types
    ImageSummary:
      required:
      - Containers
      - Created
      - Id
      - Labels
      - ParentId
      - RepoDigests
      - RepoTags
      - SharedSize
      - Size
      - VirtualSize
      type: object
      properties:
        Containers:
          type: integer
          description: |-
            Number of containers using this image. Includes both stopped and running
            containers.

            This size is not calculated by default, and depends on which API endpoint
            is used. `-1` indicates that the value has not been set / calculated.
          format: int64
        Created:
          type: integer
          description: |-
            Date and time at which the image was created as a Unix timestamp
            (number of seconds sinds EPOCH).
          format: int64
        Id:
          type: string
          description: |-
            ID is the content-addressable ID of an image.

            This identifier is a content-addressable digest calculated from the
            image's configuration (which includes the digests of layers used by
            the image).

            Note that this digest differs from the `RepoDigests` below, which
            holds digests of image manifests that reference the image.
          x-go-name: ID
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        ParentId:
          type: string
          description: |-
            ID of the parent image.

            Depending on how the image was created, this field may be empty and
            is only set for images that were built/created locally. This field
            is empty if the image was pulled from an image registry.
          x-go-name: ParentID
        RepoDigests:
          type: array
          description: |-
            List of content-addressable digests of locally available image manifests
            that the image is referenced from. Multiple manifests can refer to the
            same image.

            These digests are usually only available if the image was either pulled
            from a registry, or if the image was pushed to a registry, which is when
            the manifest is generated and its digest calculated.
          items:
            type: string
        RepoTags:
          type: array
          description: |-
            List of image names/tags in the local image cache that reference this
            image.

            Multiple image tags can refer to the same image, and this list may be
            empty if no tags reference the image, in which case the image is
            "untagged", in which case it can still be referenced by its ID.
          items:
            type: string
        SharedSize:
          type: integer
          description: |-
            Total size of image layers that are shared between this image and other
            images.

            This size is not calculated by default. `-1` indicates that the value
            has not been set / calculated.
          format: int64
        Size:
          type: integer
          description: Total size of the image including all layers it is composed
            of.
          format: int64
        VirtualSize:
          type: integer
          description: |-
            Total size of the image including all layers it is composed of.

            In versions of Docker before v1.10, this field was calculated from
            the image itself and all of its parent images. Docker v1.10 and up
            store images self-contained, and no longer use a parent-chain, making
            this field an equivalent of the Size field.

            This field is kept for backward compatibility, but may be removed in
            a future version of the API.
          format: int64
      description: ImageSummary image summary
      x-go-package: github.com/docker/docker/api/types
    Info:
      type: object
      properties:
        AccessibleTopology:
          type: array
          description: |-
            AccessibleTopolgoy is the topology this volume is actually accessible
            from.
          items:
            $ref: '#/components/schemas/Topology'
        CapacityBytes:
          type: integer
          description: |-
            CapacityBytes is the capacity of the volume in bytes. A value of 0
            indicates that the capacity is unknown.
          format: int64
        VolumeContext:
          type: object
          additionalProperties:
            type: string
          description: |-
            VolumeContext is the context originating from the CSI storage plugin
            when the Volume is created.
        VolumeID:
          type: string
          description: |-
            VolumeID is the ID of the Volume as seen by the CSI storage plugin. This
            is distinct from the Volume's Swarm ID, which is the ID used by all of
            the Docker Engine to refer to the Volume. If this field is blank, then
            the Volume has not been successfully created yet.
      description: |-
        Info contains information about the Volume as a whole as provided by
        the CSI storage plugin.
      x-go-package: github.com/docker/docker/api/types/volume
    ListResponse:
      title: ListResponse VolumeListResponse
      type: object
      properties:
        Volumes:
          type: array
          description: List of volumes
          items:
            $ref: '#/components/schemas/Volume'
        Warnings:
          type: array
          description: Warnings that occurred when fetching the list of volumes.
          items:
            type: string
      description: Volume list response
      x-go-package: github.com/docker/docker/api/types/volume
    Meta:
      title: Meta is a base object inherited by most of the other once.
      type: object
      properties:
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
        Version:
          $ref: '#/components/schemas/Version'
      x-go-package: github.com/docker/docker/api/types/swarm
    NullTime:
      title: NullTime represents a time.Time that may be null.
      type: object
      properties:
        Time:
          type: string
          format: date-time
        Valid:
          type: boolean
      description: |-
        NullTime implements the Scanner interface so
        it can be used as a scan destination, similar to NullString.
      x-go-package: database/sql
    Plugin:
      required:
      - Config
      - Enabled
      - Name
      - Settings
      type: object
      properties:
        Config:
          $ref: '#/components/schemas/PluginConfig'
        Enabled:
          type: boolean
          description: True if the plugin is running. False if the plugin is not running,
            only installed.
        Id:
          type: string
          description: Id
          x-go-name: ID
        Name:
          type: string
          description: name
        PluginReference:
          type: string
          description: plugin remote reference used to push/pull the plugin
        Settings:
          $ref: '#/components/schemas/PluginSettings'
      description: Plugin A plugin for the Engine API
      x-go-package: github.com/docker/docker/api/types
    PluginConfig:
      title: PluginConfig The config of a plugin.
      required:
      - Args
      - Description
      - Documentation
      - Entrypoint
      - Env
      - Interface
      - IpcHost
      - Linux
      - Mounts
      - Network
      - PidHost
      - PropagatedMount
      - WorkDir
      type: object
      properties:
        Args:
          $ref: '#/components/schemas/PluginConfigArgs'
        Description:
          type: string
          description: description
        DockerVersion:
          type: string
          description: Docker Version used to create the plugin
        Documentation:
          type: string
          description: documentation
        Entrypoint:
          type: array
          description: entrypoint
          items:
            type: string
        Env:
          type: array
          description: env
          items:
            $ref: '#/components/schemas/PluginEnv'
        Interface:
          $ref: '#/components/schemas/PluginConfigInterface'
        IpcHost:
          type: boolean
          description: ipc host
        Linux:
          $ref: '#/components/schemas/PluginConfigLinux'
        Mounts:
          type: array
          description: mounts
          items:
            $ref: '#/components/schemas/PluginMount'
        Network:
          $ref: '#/components/schemas/PluginConfigNetwork'
        PidHost:
          type: boolean
          description: pid host
        PropagatedMount:
          type: string
          description: propagated mount
        User:
          $ref: '#/components/schemas/PluginConfigUser'
        WorkDir:
          type: string
          description: work dir
        rootfs:
          $ref: '#/components/schemas/PluginConfigRootfs'
      x-go-package: github.com/docker/docker/api/types
    PluginConfigArgs:
      required:
      - Description
      - Name
      - Settable
      - Value
      type: object
      properties:
        Description:
          type: string
          description: description
        Name:
          type: string
          description: name
        Settable:
          type: array
          description: settable
          items:
            type: string
        Value:
          type: array
          description: value
          items:
            type: string
      description: PluginConfigArgs plugin config args
      x-go-package: github.com/docker/docker/api/types
    PluginConfigInterface:
      required:
      - Socket
      - Types
      type: object
      properties:
        ProtocolScheme:
          type: string
          description: Protocol to use for clients connecting to the plugin.
        Socket:
          type: string
          description: socket
        Types:
          type: array
          description: types
          items:
            $ref: '#/components/schemas/PluginInterfaceType'
      description: PluginConfigInterface The interface between Docker and the plugin
      x-go-package: github.com/docker/docker/api/types
    PluginConfigLinux:
      required:
      - AllowAllDevices
      - Capabilities
      - Devices
      type: object
      properties:
        AllowAllDevices:
          type: boolean
          description: allow all devices
        Capabilities:
          type: array
          description: capabilities
          items:
            type: string
        Devices:
          type: array
          description: devices
          items:
            $ref: '#/components/schemas/PluginDevice'
      description: PluginConfigLinux plugin config linux
      x-go-package: github.com/docker/docker/api/types
    PluginConfigNetwork:
      required:
      - Type
      type: object
      properties:
        Type:
          type: string
          description: type
      description: PluginConfigNetwork plugin config network
      x-go-package: github.com/docker/docker/api/types
    PluginConfigRootfs:
      type: object
      properties:
        diff_ids:
          type: array
          description: diff ids
          items:
            type: string
          x-go-name: DiffIds
        type:
          type: string
          description: type
          x-go-name: Type
      description: PluginConfigRootfs plugin config rootfs
      x-go-package: github.com/docker/docker/api/types
    PluginConfigUser:
      type: object
      properties:
        GID:
          type: integer
          description: g ID
          format: uint32
        UID:
          type: integer
          description: UID
          format: uint32
      description: PluginConfigUser plugin config user
      x-go-package: github.com/docker/docker/api/types
    PluginDevice:
      required:
      - Description
      - Name
      - Path
      - Settable
      type: object
      properties:
        Description:
          type: string
          description: description
        Name:
          type: string
          description: name
        Path:
          type: string
          description: path
        Settable:
          type: array
          description: settable
          items:
            type: string
      description: PluginDevice plugin device
      x-go-package: github.com/docker/docker/api/types
    PluginEnv:
      required:
      - Description
      - Name
      - Settable
      - Value
      type: object
      properties:
        Description:
          type: string
          description: description
        Name:
          type: string
          description: name
        Settable:
          type: array
          description: settable
          items:
            type: string
        Value:
          type: string
          description: value
      description: PluginEnv plugin env
      x-go-package: github.com/docker/docker/api/types
    PluginInterfaceType:
      required:
      - Capability
      - Prefix
      - Version
      type: object
      properties:
        Capability:
          type: string
          description: capability
        Prefix:
          type: string
          description: prefix
        Version:
          type: string
          description: version
      description: PluginInterfaceType plugin interface type
      x-go-package: github.com/docker/docker/api/types
    PluginMount:
      required:
      - Description
      - Destination
      - Name
      - Options
      - Settable
      - Source
      - Type
      type: object
      properties:
        Description:
          type: string
          description: description
        Destination:
          type: string
          description: destination
        Name:
          type: string
          description: name
        Options:
          type: array
          description: options
          items:
            type: string
        Settable:
          type: array
          description: settable
          items:
            type: string
        Source:
          type: string
          description: source
        Type:
          type: string
          description: type
      description: PluginMount plugin mount
      x-go-package: github.com/docker/docker/api/types
    PluginSettings:
      title: PluginSettings Settings that can be modified by users.
      required:
      - Args
      - Devices
      - Env
      - Mounts
      type: object
      properties:
        Args:
          type: array
          description: args
          items:
            type: string
        Devices:
          type: array
          description: devices
          items:
            $ref: '#/components/schemas/PluginDevice'
        Env:
          type: array
          description: env
          items:
            type: string
        Mounts:
          type: array
          description: mounts
          items:
            $ref: '#/components/schemas/PluginMount'
      x-go-package: github.com/docker/docker/api/types
    Port:
      required:
      - PrivatePort
      - Type
      type: object
      properties:
        IP:
          type: string
          description: Host IP address that the container's port is mapped to
        PrivatePort:
          type: integer
          description: Port on the container
          format: uint16
        PublicPort:
          type: integer
          description: Port exposed on the host
          format: uint16
        Type:
          type: string
          description: type
      description: Port An open port on a container
      x-go-package: github.com/docker/docker/api/types
    PublishState:
      type: string
      description: |-
        PublishState represents the state of a Volume as it pertains to its
        use on a particular Node.
      x-go-package: github.com/docker/docker/api/types/volume
    PublishStatus:
      type: object
      properties:
        NodeID:
          type: string
          description: NodeID is the ID of the swarm node this Volume is published
            to.
        PublishContext:
          type: object
          additionalProperties:
            type: string
          description: |-
            PublishContext is the PublishContext returned by the CSI plugin when
            a volume is published.
        State:
          $ref: '#/components/schemas/PublishState'
      description: |-
        PublishStatus represents the status of the volume as published to an
        individual node
      x-go-package: github.com/docker/docker/api/types/volume
    Scope:
      type: string
      description: |-
        Scope defines the Scope of a Cluster Volume. This is how many nodes a
        Volume can be accessed simultaneously on.
      x-go-package: github.com/docker/docker/api/types/volume
    Secret:
      type: object
      properties:
        Key:
          type: string
          description: Key is the name of the key of the key-value pair passed to
            the plugin.
        Secret:
          type: string
          description: |-
            Secret is the swarm Secret object from which to read data. This can be a
            Secret name or ID. The Secret data is retrieved by Swarm and used as the
            value of the key-value pair passed to the plugin.
      description: |-
        Secret represents a Swarm Secret value that must be passed to the CSI
        storage plugin when operating on this Volume. It represents one key-value
        pair of possibly many.
      x-go-package: github.com/docker/docker/api/types/volume
    ServiceUpdateResponse:
      type: object
      properties:
        Warnings:
          type: array
          description: Optional warning messages
          items:
            type: string
      description: ServiceUpdateResponse service update response
      x-go-package: github.com/docker/docker/api/types
    SharingMode:
      type: string
      description: |-
        SharingMode defines the Sharing of a Cluster Volume. This is how Tasks using a
        Volume at the same time can use it.
      x-go-package: github.com/docker/docker/api/types/volume
    Topology:
      title: Topology is a map of topological domains to topological segments.
      type: object
      properties:
        Segments:
          type: object
          additionalProperties:
            type: string
      description: |-
        This description is taken verbatim from the CSI Spec:

        A topological domain is a sub-division of a cluster, like "region",
        "zone", "rack", etc.
        A topological segment is a specific instance of a topological domain,
        like "zone3", "rack3", etc.
        For example {"com.company/zone": "Z1", "com.company/rack": "R3"}
        Valid keys have two segments: an OPTIONAL prefix and name, separated
        by a slash (/), for example: "com.company.example/zone".
        The key name segment is REQUIRED. The prefix is OPTIONAL.
        The key name MUST be 63 characters or less, begin and end with an
        alphanumeric character ([a-z0-9A-Z]), and contain only dashes (-),
        underscores (_), dots (.), or alphanumerics in between, for example
        "zone".
        The key prefix MUST be 63 characters or less, begin and end with a
        lower-case alphanumeric character ([a-z0-9]), contain only
        dashes (-), dots (.), or lower-case alphanumerics in between, and
        follow domain name notation format
        (https://tools.ietf.org/html/rfc1035#section-2.3.1).
        The key prefix SHOULD include the plugin's host company name and/or
        the plugin name, to minimize the possibility of collisions with keys
        from other plugins.
        If a key prefix is specified, it MUST be identical across all
        topology keys returned by the SP (across all RPCs).
        Keys MUST be case-insensitive. Meaning the keys "Zone" and "zone"
        MUST not both exist.
        Each value (topological segment) MUST contain 1 or more strings.
        Each string MUST be 63 characters or less and begin and end with an
        alphanumeric character with '-', '_', '.', or alphanumerics in
        between.
      x-go-package: github.com/docker/docker/api/types/volume
    TopologyRequirement:
      type: object
      properties:
        Preferred:
          type: array
          description: |-
            Preferred is a list of Topologies that the volume should attempt to be
            provisioned in.

            Taken from the CSI spec:

            Specifies the list of topologies the CO would prefer the volume to
            be provisioned in.

            This field is OPTIONAL. If TopologyRequirement is specified either
            requisite or preferred or both MUST be specified.

            An SP MUST attempt to make the provisioned volume available using
            the preferred topologies in order from first to last.

            If requisite is specified, all topologies in preferred list MUST
            also be present in the list of requisite topologies.

            If the SP is unable to to make the provisioned volume available
            from any of the preferred topologies, the SP MAY choose a topology
            from the list of requisite topologies.
            If the list of requisite topologies is not specified, then the SP
            MAY choose from the list of all possible topologies.
            If the list of requisite topologies is specified and the SP is
            unable to to make the provisioned volume available from any of the
            requisite topologies it MUST fail the CreateVolume call.

            Example 1:
            Given a volume should be accessible from a single zone, and
            requisite =
            {"region": "R1", "zone": "Z2"},
            {"region": "R1", "zone": "Z3"}
            preferred =
            {"region": "R1", "zone": "Z3"}
            then the the SP SHOULD first attempt to make the provisioned volume
            available from "zone" "Z3" in the "region" "R1" and fall back to
            "zone" "Z2" in the "region" "R1" if that is not possible.

            Example 2:
            Given a volume should be accessible from a single zone, and
            requisite =
            {"region": "R1", "zone": "Z2"},
            {"region": "R1", "zone": "Z3"},
            {"region": "R1", "zone": "Z4"},
            {"region": "R1", "zone": "Z5"}
            preferred =
            {"region": "R1", "zone": "Z4"},
            {"region": "R1", "zone": "Z2"}
            then the the SP SHOULD first attempt to make the provisioned volume
            accessible from "zone" "Z4" in the "region" "R1" and fall back to
            "zone" "Z2" in the "region" "R1" if that is not possible. If that
            is not possible, the SP may choose between either the "zone"
            "Z3" or "Z5" in the "region" "R1".

            Example 3:
            Given a volume should be accessible from TWO zones (because an
            opaque parameter in CreateVolumeRequest, for example, specifies
            the volume is accessible from two zones, aka synchronously
            replicated), and
            requisite =
            {"region": "R1", "zone": "Z2"},
            {"region": "R1", "zone": "Z3"},
            {"region": "R1", "zone": "Z4"},
            {"region": "R1", "zone": "Z5"}
            preferred =
            {"region": "R1", "zone": "Z5"},
            {"region": "R1", "zone": "Z3"}
            then the the SP SHOULD first attempt to make the provisioned volume
            accessible from the combination of the two "zones" "Z5" and "Z3" in
            the "region" "R1". If that's not possible, it should fall back to
            a combination of "Z5" and other possibilities from the list of
            requisite. If that's not possible, it should fall back  to a
            combination of "Z3" and other possibilities from the list of
            requisite. If that's not possible, it should fall back  to a
            combination of other possibilities from the list of requisite.
          items:
            $ref: '#/components/schemas/Topology'
        Requisite:
          type: array
          description: |-
            Requisite specifies a list of Topologies, at least one of which the
            volume must be accessible from.

            Taken verbatim from the CSI Spec:

            Specifies the list of topologies the provisioned volume MUST be
            accessible from.
            This field is OPTIONAL. If TopologyRequirement is specified either
            requisite or preferred or both MUST be specified.

            If requisite is specified, the provisioned volume MUST be
            accessible from at least one of the requisite topologies.

            Given
            x = number of topologies provisioned volume is accessible from
            n = number of requisite topologies
            The CO MUST ensure n >= 1. The SP MUST ensure x >= 1
            If x==n, then the SP MUST make the provisioned volume available to
            all topologies from the list of requisite topologies. If it is
            unable to do so, the SP MUST fail the CreateVolume call.
            For example, if a volume should be accessible from a single zone,
            and requisite =
            {"region": "R1", "zone": "Z2"}
            then the provisioned volume MUST be accessible from the "region"
            "R1" and the "zone" "Z2".
            Similarly, if a volume should be accessible from two zones, and
            requisite =
            {"region": "R1", "zone": "Z2"},
            {"region": "R1", "zone": "Z3"}
            then the provisioned volume MUST be accessible from the "region"
            "R1" and both "zone" "Z2" and "zone" "Z3".

            If x<n, then the SP SHALL choose x unique topologies from the list
            of requisite topologies. If it is unable to do so, the SP MUST fail
            the CreateVolume call.
            For example, if a volume should be accessible from a single zone,
            and requisite =
            {"region": "R1", "zone": "Z2"},
            {"region": "R1", "zone": "Z3"}
            then the SP may choose to make the provisioned volume available in
            either the "zone" "Z2" or the "zone" "Z3" in the "region" "R1".
            Similarly, if a volume should be accessible from two zones, and
            requisite =
            {"region": "R1", "zone": "Z2"},
            {"region": "R1", "zone": "Z3"},
            {"region": "R1", "zone": "Z4"}
            then the provisioned volume MUST be accessible from any combination
            of two unique topologies: e.g. "R1/Z2" and "R1/Z3", or "R1/Z2" and
            "R1/Z4", or "R1/Z3" and "R1/Z4".

            If x>n, then the SP MUST make the provisioned volume available from
            all topologies from the list of requisite topologies and MAY choose
            the remaining x-n unique topologies from the list of all possible
            topologies. If it is unable to do so, the SP MUST fail the
            CreateVolume call.
            For example, if a volume should be accessible from two zones, and
            requisite =
            {"region": "R1", "zone": "Z2"}
            then the provisioned volume MUST be accessible from the "region"
            "R1" and the "zone" "Z2" and the SP may select the second zone
            independently, e.g. "R1/Z4".
          items:
            $ref: '#/components/schemas/Topology'
      description: |-
        TopologyRequirement expresses the user's requirements for a volume's
        accessible topology.
      x-go-package: github.com/docker/docker/api/types/volume
    TypeBlock:
      title: TypeBlock defines options for using a volume as a block-type volume.
      type: object
      description: Intentionally empty.
      x-go-package: github.com/docker/docker/api/types/volume
    TypeMount:
      type: object
      properties:
        FsType:
          type: string
          description: FsType specifies the filesystem type for the mount volume.
            Optional.
        MountFlags:
          type: array
          description: MountFlags defines flags to pass when mounting the volume.
            Optional.
          items:
            type: string
      description: |-
        TypeMount contains options for using a volume as a Mount-type
        volume.
      x-go-package: github.com/docker/docker/api/types/volume
    Typeevidencestatus:
      type: string
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
    UploadEvidence:
      type: object
      properties:
        content_type:
          type: string
          description: ContentType file content type
          x-go-name: ContentType
        context:
          type: object
          properties: {}
          description: Context additional file metadata
          x-go-name: ContextData
        context_type:
          type: string
          description: ContextType file context type
          x-go-name: ContextType
        key:
          type: string
          description: Key is a file name path, it should be uniq
          x-go-name: Key
      description: UploadEvidence action parameters
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
    UsageData:
      required:
      - RefCount
      - Size
      type: object
      properties:
        RefCount:
          type: integer
          description: |-
            The number of containers referencing this volume. This field
            is set to `-1` if the reference-count is not available.
          format: int64
        Size:
          type: integer
          description: |-
            Amount of disk space used by the volume (in bytes). This information
            is only available for volumes created with the `"local"` volume
            driver. For volumes created with other volume drivers, this field
            is set to `-1` ("not available")
          format: int64
      description: |-
        UsageData Usage details about the volume. This information is used by the
        `GET /system/df` endpoint, and omitted in other endpoints.
      x-go-package: github.com/docker/docker/api/types/volume
    Version:
      title: Version represents the internal object version.
      type: object
      properties:
        Index:
          type: integer
          format: uint64
      x-go-package: github.com/docker/docker/api/types/swarm
    Volume:
      required:
      - Driver
      - Labels
      - Mountpoint
      - Name
      - Options
      - Scope
      type: object
      properties:
        ClusterVolume:
          $ref: '#/components/schemas/ClusterVolume'
        CreatedAt:
          type: string
          description: Date/Time the volume was created.
        Driver:
          type: string
          description: Name of the volume driver used by the volume.
        Labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined key/value metadata.
        Mountpoint:
          type: string
          description: Mount path of the volume on the host.
        Name:
          type: string
          description: Name of the volume.
        Options:
          type: object
          additionalProperties:
            type: string
          description: The driver specific options used when creating the volume.
        Scope:
          type: string
          description: |-
            The level at which the volume exists. Either `global` for cluster-wide,
            or `local` for machine level.
        Status:
          type: object
          additionalProperties:
            type: object
          description: |-
            Low-level details about the volume, provided by the volume driver.
            Details are returned as a map with key/value pairs:
            `{"key":"value","key2":"value2"}`.

            The `Status` field is optional, and is omitted if the volume driver
            does not support this feature.
        UsageData:
          $ref: '#/components/schemas/UsageData'
      description: Volume volume
      x-go-package: github.com/docker/docker/api/types/volume
    WaitExitError:
      type: object
      properties:
        Message:
          type: string
          description: Details of an error
      description: WaitExitError container waiting error, if any
      x-go-package: github.com/docker/docker/api/types/container
    WaitResponse:
      title: WaitResponse ContainerWaitResponse
      required:
      - StatusCode
      type: object
      properties:
        Error:
          $ref: '#/components/schemas/WaitExitError'
        StatusCode:
          type: integer
          description: Exit code of the container
          format: int64
      description: OK response to ContainerWait operation
      x-go-package: github.com/docker/docker/api/types/container
    createEvidenceOutput:
      type: object
      properties:
        file_id:
          type: integer
          description: FileID for the internal objects link
          format: int64
          x-go-name: FileID
        presigned_url:
          type: string
          description: PresignedURL to upload the file directly to the cloud storage
          x-go-name: PresignedURL
      description: CreateEvidenceOutput response for CreateEvidence request
      x-go-name: CreateEvidenceOutput
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
    getEvidenceDownloadOutput:
      title: GetEvidenceDownloadOutput response for GetEvidenceDownload request.
      type: object
      properties:
        presigned_url:
          type: string
          description: PresignedURL to download the file directly from the cloud storage
          x-go-name: PresignedURL
      x-go-name: GetEvidenceDownloadOutput
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
    listEvidenceViewOutput:
      type: object
      properties:
        Evidences:
          type: array
          description: Evidences is a list of attestations that match the query
          items:
            $ref: '#/components/schemas/Attestation'
      description: ListEvidenceViewOutput details a list of the queried evidence
      x-go-name: ListEvidenceViewOutput
      x-go-package: github.com/scribe-security/etl-flows/etl/internal/domain
  responses:
    errorResponse:
      description: ResponseError represent the reseponse error struct
      headers:
        code:
          schema:
            type: integer
            format: int64
        message:
          schema:
            type: string
      content: {}
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      in: header
