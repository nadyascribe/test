"""regscan

Revision ID: 02fbae7ac490
Revises: 9efd4f15f588
Create Date: 2023-04-27 11:32:13.581311

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from alembic import context, op

# revision identifiers, used by Alembic.
revision = "02fbae7ac490"
down_revision = "8baec89c75f7"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "RegistryScanConfig",
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=True,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("teamId", sa.BigInteger(), nullable=False),
        sa.Column("provider", sa.Text(), nullable=False),
        sa.Column("registry_url", sa.Text(), nullable=False),
        sa.Column("username", sa.Text(), nullable=True),
        sa.Column("password", sa.Text(), nullable=True),
        sa.Column("token", sa.Text(), nullable=True),
        sa.Column("repos_filter", sa.ARRAY(sa.Text()), nullable=True),
        sa.CheckConstraint(
            '\n                ("token" IS NULL AND "username" IS NOT NULL AND "password" IS NOT NULL) OR \n                ("token" IS NOT NULL AND "username" IS NULL AND "password" IS NULL)\n            '
        ),
        sa.PrimaryKeyConstraint("id", name="RegistryScanConfig_pkey"),
        schema="osint",
    )
    op.create_index(
        "RegistryScanConfig_provider_idx",
        "RegistryScanConfig",
        ["provider"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryScanConfig_registry_url_idx",
        "RegistryScanConfig",
        ["registry_url"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryScanConfig_teamId_idx",
        "RegistryScanConfig",
        ["teamId"],
        unique=False,
        schema="osint",
    )
    op.create_table(
        "RegistryImage",
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=True,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("image_id", sa.Text(), nullable=False),
        sa.Column("digest", sa.Text(), nullable=False),
        sa.Column("repository", sa.Text(), nullable=False),
        sa.Column("tag", sa.Text(), nullable=False),
        sa.Column("layers", sa.ARRAY(sa.Text()), nullable=False),
        sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("registry_scan_config", sa.BigInteger(), nullable=False),
        sa.Column(
            "state",
            sa.Enum("unprocessed", "in_progress", "failed", "processed", native_enum=False),
            server_default=sa.text("'unprocessed'"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["registry_scan_config"],
            ["osint.RegistryScanConfig.id"],
            name="RegistryImage_registry_scan_config_idx",
        ),
        sa.PrimaryKeyConstraint("id", name="RegistryImage_pkey"),
        sa.UniqueConstraint("digest", "tag", "repository", "registry_scan_config"),
        schema="osint",
    )
    op.create_index(
        "RegistryImage_config_idx",
        "RegistryImage",
        ["config"],
        unique=False,
        postgresql_using="gin",
        schema="osint",
    )
    op.create_index(
        "RegistryImage_digest_idx",
        "RegistryImage",
        ["digest"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryImage_image_id_idx",
        "RegistryImage",
        ["image_id"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryImage_layers_idx",
        "RegistryImage",
        ["layers"],
        unique=False,
        postgresql_using="gin",
        schema="osint",
    )
    op.create_index(
        "RegistryImage_registry_scan_config_idx",
        "RegistryImage",
        ["registry_scan_config"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryImage_repository_idx",
        "RegistryImage",
        ["repository"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryImage_state_idx",
        "RegistryImage",
        ["state"],
        unique=False,
        schema="osint",
    )
    op.create_index(
        "RegistryImage_tag_idx",
        "RegistryImage",
        ["tag"],
        unique=False,
        schema="osint",
    )

    args = context.get_x_argument(as_dictionary=True)
    if args.get("with-seed", False):
        op.execute(
            """
            INSERT INTO osint."RegistryScanConfig" ("teamId", "provider", "registry_url", "username", "password", "repos_filter")
            VALUES (
            6, 'dockerhub', 'scribesecurity', 'scribesecurity', 
            'gAAAAABkKewk5PyxJBW6De06jphmypsrazxutjpWNcvbEDQam4OVI9Lh2iRT3Jj9wGsZLLUOCWM8aqpFzpCQM1NqB4KSkepuD4SWb8PRkIWXbWA_jfSM3RCmyDDXkgssmmXKL2zF-IVk',
            '{}'
            );
        """
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_index(
        "RegistryImage_tag_idx",
        table_name="RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_state_idx",
        table_name="RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_repository_idx",
        table_name="RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_registry_scan_config_idx",
        table_name="RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_layers_idx",
        table_name="RegistryImage",
        postgresql_using="gin",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_image_id_idx",
        table_name="RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_digest_idx",
        table_name="RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryImage_config_idx",
        table_name="RegistryImage",
        postgresql_using="gin",
        schema="osint",
    )
    op.drop_table(
        "RegistryImage",
        schema="osint",
    )
    op.drop_index(
        "RegistryScanConfig_teamId_idx",
        table_name="RegistryScanConfig",
        schema="osint",
    )
    op.drop_index(
        "RegistryScanConfig_registry_url_idx",
        table_name="RegistryScanConfig",
        schema="osint",
    )
    op.drop_index(
        "RegistryScanConfig_provider_idx",
        table_name="RegistryScanConfig",
        schema="osint",
    )
    op.drop_table(
        "RegistryScanConfig",
        schema="osint",
    )
    # ### end Alembic commands ###
