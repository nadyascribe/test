"""compliance rules

Revision ID: b4863702e0e3
Revises: 9b285d3e7b27
Create Date: 2023-05-21 11:41:19.441612

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "b4863702e0e3"
down_revision = "9b285d3e7b27"
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute(
        """
    -- SLSA rules
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass") VALUES ('SLSA', 'SourceVersionControlled', 'GGS001', 'The code must be version-controlled.', 2, 'The code is version-controlled in {0}.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'SourceHistoryVerified', 'GGS002', 'All commits are signed.', 3, 'Signed commits are requried by the branch protection rules.', 'Signed commits are NOT requried by the branch protection rules.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'SourceRetainedIndefinitely', 'GGS003', 'The source revision history is preserved indefinitely.', 4, 'Commits deletion is prohibited by the branch protection rules. However commits history could not be matched to the provided state.', 'Branch protections rules do NOT prohibit deletions.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'BuildScripted', 'GGS004', 'All build steps are defined as code.', 1, 'The build is scripted by build script "{0}".', 'The build is NOT scripted.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'BuildService', 'GGS005', 'The build is performed by a build service.', 2, 'The build is executed by a service "{0}".', 'The build is NOT executed by a service.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'BuildAsCode', 'GGS006', 'Both build definition and configuration is managed as code.', 3, 'The build is defined and configured as code in the file:{0}.', 'Either build definition or build configuration is NOT managed as code.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'BuildEphemeralEnvironment', 'GGS007', 'Build environment is ephemeral.', 3, 'The build environment is GitHub-hosted runners, thus it is ephemeral.', 'The build environemt is NOT ephemeral.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'BuildIsolated', 'GGS008', 'Build environment is isolated.', 3, 'The build environment is isolated. The workflow does not have access to org-level secrets.', 'The build environemt is NOT isolated.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'ProvenanceAvailable', 'GGS009', 'The provenance should be available.', 1, 'The provenance is available: {0}.', 'The provenance is NOT available.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass", "messageFail") VALUES ('SLSA', 'ProvenanceAuthenticated', 'GGS010', 'The provenance authenticity can be verified.', 2, 'The provenance is authenticated. {0}.', 'The provenance is NOT authenticated.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass") VALUES ('SLSA', 'ProvenanceServiceGenerated', 'GGS011', 'The provenance is generated by a build service.', 2, 'The provenance is generated by the build system.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "slsaLevel", "messagePass") VALUES ('SLSA', 'ProvenanceNonFalsifiable', 'GGS012', 'The provenance cannot be modified by the users.', 3, 'Provenance cannot be falsified by the build service’s users.');

-- SLSA rules
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure any change to code receives approval of two strongly authenticated users', '1.1.3', 'Ensure any change to code receives approval of two strongly authenticated users', 'An organization can protect specific code branches — for example, the "main" branch which often is the version deployed to production — by setting protection rules. These rules secure your code repository from unwanted or unauthorized changes. You may set requirements for any code change to that branch, and thus specify a minimum number of reviewers required to approve a change.', 'An organization can protect specific code branches — for example, the "main" branch which often is the version deployed to production — by setting protection rules. These rules secure your code repository from unwanted or unauthorized changes. You may set requirements for any code change to that branch, and thus specify a minimum number of reviewers required to approve a change.', 'An organization can protect specific code branches — for example, the "main" branch which often is the version deployed to production — by setting protection rules. These rules secure your code repository from unwanted or unauthorized changes. You may set requirements for any code change to that branch, and thus specify a minimum number of reviewers required to approve a change.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure previous approvals are dismissed when updates are introduced to a code change proposal', '1.1.4', 'Ensure previous approvals are dismissed when updates are introduced to a code change proposal', 'For each code repository in use, enforce an organization-wide policy to dismiss given approvals to code change suggestions if those suggestions were updated.', 'For each code repository in use, enforce an organization-wide policy to dismiss given approvals to code change suggestions if those suggestions were updated.', 'For each code repository in use, enforce an organization-wide policy to dismiss given approvals to code change suggestions if those suggestions were updated.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure that there are restrictions on who can dismiss code change reviews', '1.1.5', 'Ensure that there are restrictions on who can dismiss code change reviews', 'For each code repository in use, carefully select the individual collaborators or groups whom you trust with the ability to dismiss code change reviews.', 'For each code repository in use, carefully select the individual collaborators or groups whom you trust with the ability to dismiss code change reviews.', 'For each code repository in use, carefully select the individual collaborators or groups whom you trust with the ability to dismiss code change reviews.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure code owners are set for extra sensitive code or configuration', '1.1.6', 'Ensure code owners are set for extra sensitive code or configuration', 'For every code repository in use, identify particularly sensitive parts of code and configurations and set trusted users to be their code owners.', 'For every code repository in use, identify particularly sensitive parts of code and configurations and set trusted users to be their code owners.', 'For every code repository in use, identify particularly sensitive parts of code and configurations and set trusted users to be their code owners.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure inactive branches are reviewed and removed periodically', '1.1.8', 'Ensure inactive branches are reviewed and removed periodically', 'For each code repository in use, review existing Git branches and remove those which have not been active for a prescribed period of time.', 'For each code repository in use, review existing Git branches and remove those which have not been active for a prescribed period of time.', 'For each code repository in use, review existing Git branches and remove those which have not been active for a prescribed period of time.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure all checks have passed before the merge of new code', '1.1.9', 'Ensure all checks have passed before the merge of new code', 'Configure each code repository to require all status checks to pass before permitting a merge of new code.', 'Configure each code repository to require all status checks to pass before permitting a merge of new code.', 'Configure each code repository to require all status checks to pass before permitting a merge of new code.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure open git branches are up to date before they can be merged into codebase', '1.1.10', 'Ensure open git branches are up to date before they can be merged into codebase', 'For each code repository in use, enforce a policy to only allow merging open branches if they are current with the latest change from their origin repository.', 'For each code repository in use, enforce a policy to only allow merging open branches if they are current with the latest change from their origin repository.', 'For each code repository in use, enforce a policy to only allow merging open branches if they are current with the latest change from their origin repository.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure all open comments are resolved before allowing to merge code changes', '1.1.11', 'Ensure all open comments are resolved before allowing to merge code changes', 'For each code repository in use, require open comments to be resolved before the relevant code change can be merged.', 'For each code repository in use, require open comments to be resolved before the relevant code change can be merged.', 'For each code repository in use, require open comments to be resolved before the relevant code change can be merged.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure verifying signed commits of new changes before merging', '1.1.12', 'Ensure verifying signed commits of new changes before merging', 'For each repository in use, enforce the branch protection rule of requiring signed commits, and make sure only signed commits are capable of merging.', 'For each repository in use, enforce the branch protection rule of requiring signed commits, and make sure only signed commits are capable of merging.', 'For each repository in use, enforce the branch protection rule of requiring signed commits, and make sure only signed commits are capable of merging.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure linear history is required', '1.1.13', 'Ensure linear history is required', 'For each repository in use, require linear history and/or allow only rebase merge and squash merge.', 'For each repository in use, require linear history and/or allow only rebase merge and squash merge.', 'For each repository in use, require linear history and/or allow only rebase merge and squash merge.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure branch protection rules are enforced on administrators', '1.1.14', 'Ensure branch protection rules are enforced on administrators', 'For each repository in use, enforce branch protection rules on administrators, as well.', 'For each repository in use, enforce branch protection rules on administrators, as well.', 'For each repository in use, enforce branch protection rules on administrators, as well.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure pushing of new code is restricted to specific individuals or teams', '1.1.15', 'Ensure pushing of new code is restricted to specific individuals or teams', 'For each repository in use, allow only trusted and responsible users to push or merge new code.', 'For each repository in use, allow only trusted and responsible users to push or merge new code.', 'For each repository in use, allow only trusted and responsible users to push or merge new code.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure force pushes code to branches is denied', '1.1.16', 'Ensure force pushes code to branches is denied', 'For each repository in use, block the option to "Force Push" code.', 'For each repository in use, block the option to "Force Push" code.', 'For each repository in use, block the option to "Force Push" code.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure branch deletions are denied', '1.1.17', 'Ensure branch deletions are denied', 'For each repository that is being used, block the option to delete protected branches via branch protection rules.', 'For each repository that is being used, block the option to delete protected branches via branch protection rules.', 'For each repository that is being used, block the option to delete protected branches via branch protection rules.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure all public repositories contain a SECURITY.md file', '1.2.1', 'Ensure all public repositories contain a SECURITY.md file', 'For each repository in use, create a SECURITY.md file and save it in the documents or root directory of the repository.', 'For each repository in use, create a SECURITY.md file and save it in the documents or root directory of the repository.', 'For each repository in use, create a SECURITY.md file and save it in the documents or root directory of the repository.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure repository creation is limited to specific members', '1.2.2', 'Ensure repository creation is limited to specific members', 'Restrict repository creation to trusted users and teams only.', 'Restrict repository creation to trusted users and teams only.', 'Restrict repository creation to trusted users and teams only.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure repository deletion is limited to specific members', '1.2.3', 'Ensure repository deletion is limited to specific members', 'Enforce repository deletion by a few trusted and responsible users only.', 'Enforce repository deletion by a few trusted and responsible users only.', 'Enforce repository deletion by a few trusted and responsible users only.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure issue deletion is limited to specific members', '1.2.4', 'Ensure issue deletion is limited to specific members', 'Restrict issue deletion to a few trusted and responsible users only.', 'Restrict issue deletion to a few trusted and responsible users only.', 'Restrict issue deletion to a few trusted and responsible users only.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure inactive users are reviewed and removed periodically', '1.3.1', 'Ensure inactive users are reviewed and removed periodically', 'For each repository in use, review inactive user accounts (members that left the organization, etc.) and remove them.', 'For each repository in use, review inactive user accounts (members that left the organization, etc.) and remove them.', 'For each repository in use, review inactive user accounts (members that left the organization, etc.) and remove them.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure minimum admins are set for the organization', '1.3.3', 'Ensure minimum admins are set for the organization', 'Set the minimum number of administrators in your organization.', 'Set the minimum number of administrators in your organization.', 'Set the minimum number of administrators in your organization.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure the organization is requiring members to use MFA', '1.3.5', 'Ensure the organization is requiring members to use MFA', 'Use the built-in setting to set the enforcement of Multi-Factor Authentication for each member of the organization.', 'Use the built-in setting to set the enforcement of Multi-Factor Authentication for each member of the organization.', 'Use the built-in setting to set the enforcement of Multi-Factor Authentication for each member of the organization.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure 2 admins are set for each repository', '1.3.7', 'Ensure 2 admins are set for each repository', 'For every repository in use, set two administrators.', 'For every repository in use, set two administrators.', 'For every repository in use, set two administrators.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure strict base permissions are set for repositories', '1.3.8', 'Ensure strict base permissions are set for repositories', 'Set strict base permissions for the organization repositories — either "None" or "Read."', 'Set strict base permissions for the organization repositories — either "None" or "Read."', 'Set strict base permissions for the organization repositories — either "None" or "Read."');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure an organization’s identity is confirmed with a Verified badge', '1.3.9', 'Ensure an organization’s identity is confirmed with a Verified badge', 'Verify the organization"s domains and secure a "Verified" badge next to its name.', 'Verify the organization"s domains and secure a "Verified" badge next to its name.', 'Verify the organization"s domains and secure a "Verified" badge next to its name.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure all build steps are defined as code', '2.3.1', 'Ensure all build steps are defined as code', 'Convert pipeline instructions into code-based syntax, and upload them to the organization"s version control platform.', 'Convert pipeline instructions into code-based syntax, and upload them to the organization"s version control platform.', 'Convert pipeline instructions into code-based syntax, and upload them to the organization"s version control platform.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure access to the build process’s triggering is minimized', '2.3.5', 'Ensure access to the build process’s triggering is minimized', 'For every pipeline in use, grant only the necessary members permission to trigger it.', 'For every pipeline in use, grant only the necessary members permission to trigger it.', 'For every pipeline in use, grant only the necessary members permission to trigger it.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure pipelines are automatically scanned for vulnerabilities', '2.3.7', 'Ensure pipelines are automatically scanned for vulnerabilities', 'For each pipeline, set automated vulnerabilities scanning.', 'For each pipeline, set automated vulnerabilities scanning.', 'For each pipeline, set automated vulnerabilities scanning.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure scanners are in place to identify and prevent sensitive data in pipeline files', '2.3.8', 'Ensure scanners are in place to identify and prevent sensitive data in pipeline files', 'For every pipeline that is in use, set scanners that will identify and prevent sensitive data in it.', 'For every pipeline that is in use, set scanners that will identify and prevent sensitive data in it.', 'For every pipeline that is in use, set scanners that will identify and prevent sensitive data in it.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure all external dependencies used in the build process are locked', '2.4.2', 'Ensure all external dependencies used in the build process are locked', 'For every external dependency in use in pipelines, lock it.', 'For every external dependency in use in pipelines, lock it.', 'For every external dependency in use in pipelines, lock it.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure pipeline steps produce an SBOM', '2.4.6', 'Ensure pipeline steps produce an SBOM', 'For each pipeline, configure it to produce an SBOM on every run.', 'For each pipeline, configure it to produce an SBOM on every run.', 'For each pipeline, configure it to produce an SBOM on every run.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure dependencies are pinned to a specific, verified version', '3.1.7', 'Ensure dependencies are pinned to a specific, verified version', 'For every dependency in use, pin to a specific version.', 'For every dependency in use, pin to a specific version.', 'For every dependency in use, pin to a specific version.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure packages are automatically scanned for known vulnerabilities', '3.2.2', 'Ensure packages are automatically scanned for known vulnerabilities', 'Set automatic scanning of packages for vulnerabilities.', 'Set automatic scanning of packages for vulnerabilities.', 'Set automatic scanning of packages for vulnerabilities.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure packages are automatically scanned for license implications', '3.2.3', 'Ensure packages are automatically scanned for license implications', 'Set automatic package scanning for license implications.', 'Set automatic package scanning for license implications.', 'Set automatic package scanning for license implications.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure user’s access to the package registry utilizes MFA', '4.2.3', 'Ensure user’s access to the package registry utilizes MFA', 'For each package registry in use, enforce Multi-Factor Authentication as the only way to authenticate.', 'For each package registry in use, enforce Multi-Factor Authentication as the only way to authenticate.', 'For each package registry in use, enforce Multi-Factor Authentication as the only way to authenticate.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure anonymous access to artifacts is revoked', '4.2.5', 'Ensure anonymous access to artifacts is revoked', 'Disable the anonymous access option on every artifact or package manager in use.', 'Disable the anonymous access option on every artifact or package manager in use.', 'Disable the anonymous access option on every artifact or package manager in use.');
INSERT INTO osint."ComplianceRule" ("type", "ruleName", "ruleId", "description", "messagePass", "messageFail", "messageReview") VALUES ('SSDF', 'Ensure webhooks of the package registry are secured', '4.3.4', 'Ensure webhooks of the package registry are secured', 'For each webhook in use, change it to secured (over HTTPS).', 'For each webhook in use, change it to secured (over HTTPS).', 'For each webhook in use, change it to secured (over HTTPS).');


UPDATE osint."ComplianceStatus" SET "enum" = 'informational' WHERE "enum" = 'info';
"""
    )


def downgrade() -> None:
    op.execute(
        """
    truncate table osint."ComplianceRule" cascade;
    UPDATE osint."ComplianceStatus" SET "enum" = 'info' WHERE "enum" = 'informational';
    """
    )
