"""cleanup slsa compliance rules

Revision ID: 0e57fa225358
Revises: 1e6cedfb339e
Create Date: 2023-05-29 12:12:57.722956

"""
import json

from alembic import op
from sqlalchemy.engine.mock import MockConnection

from dags.storage import model_as_dict, make_upsert_query
from dags.storage.models.osint import ComplianceRule

# revision identifiers, used by Alembic.
revision = "0e57fa225358"
down_revision = "1e6cedfb339e"
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.create_index(
        "ComplianceRule_type_ruleId",
        "ComplianceRule",
        ["type", "ruleId"],
        unique=True,
        schema="osint",
    )

    if not isinstance(op.get_bind(), MockConnection):
        with open("migrations/versions/compliance_rules.json") as f:
            rules = json.load(f)
        inserts = []
        for rule in rules:
            level = None
            if rule["properties"]["SLSALevel1"]:
                level = 1
            elif rule["properties"]["SLSALevel2"]:
                level = 2
            elif rule["properties"]["SLSALevel3"]:
                level = 3
            elif rule["properties"]["SLSALevel4"]:
                level = 4
            r = ComplianceRule(
                type="SLSA",
                ruleName=rule["name"],
                ruleId=rule["id"],
                description=rule["fullDescription"]["text"],
                slsaLevel=level,
                messagePass=rule["messageStrings"]["pass"]["text"],
                messageFail=rule["messageStrings"]["fail"]["text"],
                messageNotApplicable="",
            )
            if "review" in rule["messageStrings"]:
                r.messageReview = (rule["messageStrings"]["review"]["text"],)
            if "open" in rule["messageStrings"]:
                r.messageOpen = (rule["messageStrings"]["open"]["text"],)
            if "informational" in rule["messageStrings"]:
                r.messageInformational = rule["messageStrings"]["informational"]["text"]
            inserts.append(model_as_dict(r))
        op.execute(make_upsert_query(ComplianceRule, [ComplianceRule.type, ComplianceRule.ruleId]).values(inserts))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ComplianceRule_type_ruleId", table_name="ComplianceRule", schema="osint")
    # ### end Alembic commands ###
