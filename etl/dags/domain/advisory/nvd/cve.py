"""
models here are autogenerated by dict-typed tool
"""
from __future__ import annotations

from typing import List

from typing_extensions import TypedDict

from dags.domain.advisory import AdvisoryType, Severity
from dags.storage.models import osint


class NVDException(Exception):
    pass


class UnexpectedFormat(NVDException):
    pass


class DescriptionItem(TypedDict):
    lang: str
    value: str


class Cvss3Data(TypedDict):
    version: str
    vectorString: str
    attackVector: str
    attackComplexity: str
    privilegesRequired: str
    userInteraction: str
    scope: str
    confidentialityImpact: str
    integrityImpact: str
    availabilityImpact: str
    baseScore: float
    baseSeverity: str


class CvssMetricV31Item(TypedDict):
    source: str
    type: str
    cvssData: Cvss3Data
    exploitabilityScore: float
    impactScore: float


class CvssMetricV30Item(TypedDict):
    source: str
    type: str
    cvssData: Cvss3Data
    exploitabilityScore: float
    impactScore: float


class Cvss2Data(TypedDict):
    version: str
    vectorString: str
    accessVector: str
    accessComplexity: str
    authentication: str
    confidentialityImpact: str
    integrityImpact: str
    availabilityImpact: str
    baseScore: float


class CvssMetricV2Item(TypedDict):
    source: str
    type: str
    cvssData: Cvss2Data
    baseSeverity: str
    exploitabilityScore: float
    impactScore: float
    acInsufInfo: bool
    obtainAllPrivilege: bool
    obtainUserPrivilege: bool
    obtainOtherPrivilege: bool
    userInteractionRequired: bool


class Metrics(TypedDict):
    cvssMetricV31: List[CvssMetricV31Item] | None
    cvssMetricV30: List[CvssMetricV30Item] | None
    cvssMetricV2: List[CvssMetricV2Item] | None


class WeaknessesItem(TypedDict):
    source: str
    type: str
    description: List[DescriptionItem]


class CpeMatchItem(TypedDict):
    vulnerable: bool
    criteria: str
    matchCriteriaId: str
    versionStartIncluding: str | None
    versionEndIncluding: str | None


class NodesItem(TypedDict):
    operator: str
    negate: bool
    cpeMatch: list[CpeMatchItem]


class ConfigurationsItem(TypedDict):
    nodes: List[NodesItem]


class ReferencesItem(TypedDict):
    url: str
    source: str
    tags: List[str]


class Cve(TypedDict):
    id: str
    sourceIdentifier: str
    published: str
    lastModified: str
    vulnStatus: str
    descriptions: List[DescriptionItem]
    metrics: Metrics
    weaknesses: List[WeaknessesItem]
    configurations: list[ConfigurationsItem] | None
    references: List[ReferencesItem]


class Vulnerability(TypedDict):
    cve: Cve


def convert_to_advisory(
    data: Vulnerability,
) -> tuple[osint.VulAdvisory, Severity | None]:
    try:
        vuln = data["cve"]
        typ, vec, score, severity = _extract_metrics(vuln["metrics"])
        descr = ""
        cpes = []
        if "configurations" in vuln:
            cpes = [
                m["criteria"] for conf in vuln["configurations"] for node in conf["nodes"] for m in node["cpeMatch"]
            ]
        for d in vuln["descriptions"]:
            if d["lang"] == "en":
                descr = d["value"] or ""

        return (
            osint.VulAdvisory(
                vulId=vuln["id"],
                source=typ,
                cpes=cpes,
                lastModified=vuln["lastModified"],
                publishedOn=vuln["published"],
                hyperLinks=[r["url"] for r in vuln["references"]],  # type: ignore
                baseScore=score,
                vector=vec,
                advisoryText=descr,
                info=vuln,
            ),
            Severity.from_str(severity) if severity else None,
        )
    except KeyError as e:
        raise UnexpectedFormat(f"unexpected format: {e}")


def convert_to_vulnerability(data: Vulnerability) -> osint.Vulnerability:
    vuln = data["cve"]

    return osint.Vulnerability(
        id=vuln["id"],
        publishedOn=vuln["published"],
    )


baseScore = float
vector = str


def _extract_metrics(
    metrics: Metrics | None,
) -> tuple[AdvisoryType, vector, baseScore, str]:
    if not metrics:
        return AdvisoryType.NVD2, "", 0.0, ""  # NOTE(anton): no metrics
    if m31 := metrics.get("cvssMetricV31"):
        data = m31[0]["cvssData"]
        return (
            AdvisoryType.NVD31,
            data["vectorString"],
            data["baseScore"],
            data["baseSeverity"],
        )
    if m30 := metrics.get("cvssMetricV30"):
        data = m30[0]["cvssData"]
        return (
            AdvisoryType.NVD30,
            data["vectorString"],
            data["baseScore"],
            data["baseSeverity"],
        )
    if m2 := metrics.get("cvssMetricV2"):
        data = m2[0]["cvssData"]
        return (
            AdvisoryType.NVD2,
            data["vectorString"],
            data["baseScore"],
            m2[0]["baseSeverity"],
        )
    raise ValueError("no supported metrics found")
