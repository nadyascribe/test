"""
models here are autogenerated by dict-typed tool
"""
from __future__ import annotations

from typing import List, Optional

from typing_extensions import TypedDict


class VendorMetadata(TypedDict):
    pass


class CVSSMetrics(TypedDict):
    baseScore: float
    exploitabilityScore: float
    impactScore: float


class CVSS(TypedDict):
    """not autogenerated"""

    version: str
    vector: str
    metrics: CVSSMetrics


class Fix(TypedDict):
    versions: list[str]
    state: str


class Vulnerability(TypedDict):
    id: str
    dataSource: str
    namespace: str
    severity: str
    urls: List[str]
    description: str
    cvss: List[CVSS]
    fix: Fix
    advisories: List


class SearchedBy(TypedDict):
    namespace: str
    cpes: List[str]
    language: Optional[str]


class Found(TypedDict):
    vulnerabilityID: str
    versionConstraint: str
    cpes: Optional[List[str]]


class MatchDetailsItem(TypedDict):
    type: str
    matcher: str
    searchedBy: SearchedBy
    found: Found


class Artifact(TypedDict):
    name: str
    version: str
    type: str
    locations: list
    language: str
    licenses: list[str]
    cpes: list[str]
    purl: str
    upstreams: list


class RelatedVulnerabilitiesItem(TypedDict):
    id: str
    dataSource: str
    namespace: str
    severity: str
    urls: List[str]
    description: str
    cvss: List[CVSS]


class MatchesItem(TypedDict):
    vulnerability: Vulnerability
    relatedVulnerabilities: List[RelatedVulnerabilitiesItem]
    matchDetails: List[MatchDetailsItem]
    artifact: Artifact


class Target(TypedDict):
    userInput: str
    imageID: str
    manifestDigest: str
    mediaType: str
    tags: List
    imageSize: int
    layers: None
    manifest: None
    config: None
    repoDigests: List
    architecture: str
    os: str


class Source(TypedDict):
    type: str
    target: Target


class Distro(TypedDict):
    name: str
    version: str
    idLike: None


Search = TypedDict(
    "Search",
    {
        "scope": str,
        "unindexed-archives": bool,
        "indexed-archives": bool,
    },
)

Db = TypedDict(
    "Db",
    {
        "cache-dir": str,
        "update-url": str,
        "ca-cert": str,
        "auto-update": bool,
        "validate-by-hash-on-start": bool,
        "validate-age": bool,
        "max-allowed-built-age": int,
    },
)


class Maven(TypedDict):
    searchUpstreamBySha1: bool
    baseUrl: str


class ExternalSources(TypedDict):
    enable: bool
    maven: Maven


Java = TypedDict(
    "Java",
    {
        "using-cpes": bool,
    },
)


class Match(TypedDict):
    java: Java
    dotnet: Java
    golang: Java
    javascript: Java
    python: Java
    ruby: Java
    stock: Java


Dev = TypedDict(
    "Dev",
    {
        "profile-cpu": bool,
        "profile-mem": bool,
    },
)

Registry = TypedDict(
    "Registry",
    {
        "insecure-skip-tls-verify": bool,
        "insecure-use-http": bool,
        "auth": List,
    },
)


class Log(TypedDict):
    structured: bool
    level: str
    file: str


Configuration = TypedDict(
    "Configuration",
    {
        "configPath": str,
        "verbosity": int,
        "output": str,
        "file": str,
        "distro": str,
        "add-cpes-if-none": bool,
        "output-template-file": str,
        "quiet": bool,
        "check-for-app-update": bool,
        "only-fixed": bool,
        "only-notfixed": bool,
        "platform": str,
        "search": Search,
        "ignore": None,
        "exclude": List,
        "db": Db,
        "externalSources": ExternalSources,
        "match": Match,
        "dev": Dev,
        "fail-on-severity": str,
        "registry": Registry,
        "log": Log,
        "show-suppressed": bool,
        "by-cve": bool,
    },
)


class Db1(TypedDict):
    built: str
    schemaVersion: int
    location: str
    checksum: str
    error: None


class Descriptor(TypedDict):
    name: str
    version: str
    configuration: Configuration
    db: Db1


class SBOM(TypedDict):
    matches: List[MatchesItem]
    source: Source
    distro: Distro
    descriptor: Descriptor
